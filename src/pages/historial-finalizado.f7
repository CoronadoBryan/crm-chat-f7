<template>
  <div class="page">
    <div class="navbar">
      <div class="navbar-bg"></div>
      <div class="navbar-inner sliding">
        <div class="left">
          <a
            href="#"
            class="link"
            @click="${() => $f7.views.main.router.back()}"
          >
            <span>Volver</span>
          </a>
        </div>
        <div class="title" id="page-title">Historial de Cliente</div>
        <div class="right">
          <a href="#" class="link" @click="${mostrarInfoCliente}">
            <span>Info</span>
          </a>
        </div>
      </div>
    </div>

    <div class="page-content">
      <div class="block-title">Conversaciones Finalizadas</div>

      <!-- Contenedor para el historial -->
      <div id="historial-container">
        <div class="block block-strong text-align-center">
          <p>Cargando historial...</p>
        </div>
      </div>
    </div>
  </div>
</template>

<script>
  import { getConversaciones } from "../js/services/index.js";

  export default (props, { $f7, $on, $el }) => {
    let conversacionesFinalizadas = [];
    let clienteInfo = null;
    let telefonoCliente = "";

    // Funciones de formato
    const formatearDia = (fechaObj) => {
      const fecha = fechaObj?.date || fechaObj;
      return new Date(fecha).getDate().toString().padStart(2, "0");
    };

    const formatearMes = (fechaObj) => {
      const meses = [
        "ENE",
        "FEB",
        "MAR",
        "ABR",
        "MAY",
        "JUN",
        "JUL",
        "AGO",
        "SEP",
        "OCT",
        "NOV",
        "DIC",
      ];
      const fecha = fechaObj?.date || fechaObj;
      return meses[new Date(fecha).getMonth()];
    };

    const formatearHora = (fechaObj) => {
      const fecha = fechaObj?.date || fechaObj;
      return new Date(fecha).toLocaleTimeString("es-ES", {
        hour: "2-digit",
        minute: "2-digit",
      });
    };

    const formatearFechaCompleta = (fechaObj) => {
      const fecha = fechaObj?.date || fechaObj;
      return new Date(fecha).toLocaleDateString("es-ES", {
        day: "2-digit",
        month: "2-digit",
        year: "numeric",
        hour: "2-digit",
        minute: "2-digit",
      });
    };

    const calcularDuracion = (inicioObj, finObj) => {
      const inicio = inicioObj?.date || inicioObj;
      const fin = finObj?.date || finObj;
      const diffMs = new Date(fin) - new Date(inicio);
      const diffMins = Math.floor(diffMs / 60000);

      if (diffMins < 1) return "< 1 min";

      const diffHours = Math.floor(diffMins / 60);
      const remainingMins = diffMins % 60;

      if (diffHours > 0) {
        return `${diffHours}h ${remainingMins}min`;
      }
      return `${diffMins} min`;
    };

    // Funci√≥n para obtener elemento del DOM de forma compatible
    const getElement = (selector) => {
      // Opci√≥n 1: Usar document.querySelector directamente
      if (document.querySelector) {
        return document.querySelector(selector);
      }

      // Opci√≥n 2: Si $el est√° disponible y tiene m√©todos jQuery-like
      if ($el && typeof $el === "function") {
        return $el(selector)[0];
      }

      // Opci√≥n 3: Si $el.value est√° disponible
      if ($el && $el.value) {
        return $el.value.querySelector
          ? $el.value.querySelector(selector)
          : $el.value.find
          ? $el.value.find(selector)[0]
          : null;
      }

      return null;
    };

    // Funci√≥n para actualizar la UI
    const actualizarUI = () => {
      try {
        // Actualizar t√≠tulo
        const titleEl = getElement("#page-title");
        if (titleEl) {
          titleEl.textContent = `Historial: ${telefonoCliente}`;
        }

        // Actualizar historial
        const historialContainer = getElement("#historial-container");
        if (historialContainer) {
          if (conversacionesFinalizadas.length > 0) {
            historialContainer.innerHTML = `
              <div class="timeline">
                ${conversacionesFinalizadas
                  .map(
                    (conversacion) => `
                  <div class="timeline-item">
                    <div class="timeline-item-date">
                      ${formatearDia(conversacion.fechaActualizacion)} 
                      <small>${formatearMes(
                        conversacion.fechaActualizacion
                      )}</small>
                    </div>
                    <div class="timeline-item-divider"></div>
                    <div class="timeline-item-content">
                      <div class="timeline-item-inner">
                        <div class="timeline-item-title">
                          <strong>Conversaci√≥n #${
                            conversacion.conversacionId
                          }</strong>
                          <span style="float: right; font-size: 12px; color: #666;">
                            ${formatearHora(conversacion.fechaActualizacion)}
                          </span>
                        </div>
                        <div class="timeline-item-subtitle" style="color: #4CAF50;">
                          ‚úì Finalizada - Estado ${conversacion.estadoId}
                        </div>
                        <div class="timeline-item-text">
                          Iniciada: ${formatearFechaCompleta(
                            conversacion.fechaCreacion
                          )}<br>
                          Finalizada: ${formatearFechaCompleta(
                            conversacion.fechaActualizacion
                          )}<br>
                          Mensajes: ${conversacion.nroMensajes}
                        </div>
                        <div style="margin-top: 8px;">
                          <button class="button button-small button-outline" 
                                  onclick="window.verConversacionHistorial(${
                                    conversacion.conversacionId
                                  })">
                            Ver Chat Completo
                          </button>
                          <span style="margin-left: 10px; font-size: 12px; color: #666;">
                            Duraci√≥n: ${calcularDuracion(
                              conversacion.fechaCreacion,
                              conversacion.fechaActualizacion
                            )}
                          </span>
                        </div>
                      </div>
                    </div>
                  </div>
                `
                  )
                  .join("")}
              </div>
            `;
          } else {
            historialContainer.innerHTML = `
              <div class="block block-strong text-align-center">
                <p>Este cliente no tiene conversaciones finalizadas</p>
              </div>
            `;
          }
        }

        console.log("‚úÖ UI actualizada correctamente");
      } catch (error) {
        console.error("‚ùå Error al actualizar UI:", error);
      }
    };

    const cargarHistorialCliente = async (conversacionIdActual) => {
      try {
        $f7.preloader.show();
        const todasConversaciones = await getConversaciones();
        const conversacionActual = todasConversaciones.find(
          (conv) => conv.conversacionId == conversacionIdActual
        );

        if (!conversacionActual) {
          throw new Error(
            `No se encontr√≥ la conversaci√≥n ${conversacionIdActual}`
          );
        }

        telefonoCliente = conversacionActual.telefono;
    

        conversacionesFinalizadas = todasConversaciones.filter((conv) => {
          const esDelMismoCliente = conv.telefono === telefonoCliente;

          const estaFinalizada = conv.estadoId === 4;


          return esDelMismoCliente && estaFinalizada;
        });

      
        clienteInfo = conversacionActual; 

        conversacionesFinalizadas.sort(
          (a, b) =>
            new Date(b.fechaActualizacion.date) -
            new Date(a.fechaActualizacion.date)
        );

        actualizarUI();

        console.log(
          `üìã Conversaciones finalizadas encontradas para ${telefonoCliente}:`,
          conversacionesFinalizadas.length
        );
      } catch (error) {
        console.error("‚ùå Error al cargar historial:", error);
        $f7.dialog.alert("Error al cargar el historial del cliente");
        conversacionesFinalizadas = [];

        const historialContainer = getElement("#historial-container");
        if (historialContainer) {
          historialContainer.innerHTML = `
            <div class="block block-strong text-align-center">
              <p>Error al cargar el historial del cliente</p>
            </div>
          `;
        }
      } finally {
        $f7.preloader.hide();
      }
    };

    window.verConversacionHistorial = (conversacionId) => {
      $f7.views.main.router.navigate(`/messages/${conversacionId}/`);
    };

    const mostrarInfoCliente = () => {
      const totalConv = conversacionesFinalizadas.length;
      const primeraConv = conversacionesFinalizadas[totalConv - 1];
      const ultimaConv = conversacionesFinalizadas[0];

      $f7.dialog.alert(
        `
        üìã Informaci√≥n del Cliente:
        ‚Ä¢ Tel√©fono: ${telefonoCliente}
        ‚Ä¢ Total conversaciones finalizadas: ${totalConv}
        ${
          primeraConv
            ? `‚Ä¢ Primera conversaci√≥n: ${formatearFechaCompleta(
                primeraConv.fechaCreacion
              )}`
            : ""
        }
        ${
          ultimaConv
            ? `‚Ä¢ √öltima conversaci√≥n: ${formatearFechaCompleta(
                ultimaConv.fechaActualizacion
              )}`
            : ""
        }
      `,
        "Informaci√≥n del Cliente"
      );
    };

    $on("pageInit", (page) => {
      const conversacionIdParam =
        page.route?.params?.conversacionId ||
        $f7.views.main.router.currentRoute?.params?.conversacionId ||
        "254";

      console.log(
        `üì± Cargando historial para conversaci√≥n: ${conversacionIdParam}`
      );

      setTimeout(() => {
        cargarHistorialCliente(conversacionIdParam);
      }, 300);
    });

    return $render;
  };
</script>

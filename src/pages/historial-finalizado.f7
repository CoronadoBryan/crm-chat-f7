<template>
  <div class="page">
    <div class="navbar">
      <div class="navbar-bg"></div>
      <div class="navbar-inner sliding">
        <div class="left">
          <a
            href="#"
            class="link"
            @click="${() => $f7.views.main.router.back()}"
          >
            <span>Volver</span>
          </a>
        </div>
        <div class="title" id="page-title">Historial de Cliente</div>
      </div>
    </div>

    <div class="page-content">
      <div class="block-title">Conversaciones Finalizadas</div>
      <div id="historial-container">
        <div class="block block-strong text-align-center">
          <p>Cargando historial...</p>
        </div>
      </div>
    </div>
  </div>
</template>

<script>
  import { getConversaciones } from "../js/services/index.js";

  export default (props, { $f7, $on }) => {
    let conversacionesFinalizadas = [];
    let telefonoCliente = "";

    // Utilidades de formato - Simplificadas
    const formatearFecha = (fecha) => {
      const date = new Date(fecha?.date || fecha);
      return {
        dia: date.getDate().toString().padStart(2, "0"),
        mes: [
          "ENE",
          "FEB",
          "MAR",
          "ABR",
          "MAY",
          "JUN",
          "JUL",
          "AGO",
          "SEP",
          "OCT",
          "NOV",
          "DIC",
        ][date.getMonth()],
        hora: date.toLocaleTimeString("es-ES", {
          hour: "2-digit",
          minute: "2-digit",
        }),
        completa: date.toLocaleDateString("es-ES", {
          day: "2-digit",
          month: "2-digit",
          year: "numeric",
          hour: "2-digit",
          minute: "2-digit",
        }),
      };
    };

    const calcularDuracion = (inicio, fin) => {
      const diffMs =
        new Date(fin?.date || fin) - new Date(inicio?.date || inicio);
      const diffMins = Math.floor(diffMs / 60000);

      if (diffMins < 1) return "< 1 min";

      const diffHours = Math.floor(diffMins / 60);
      const remainingMins = diffMins % 60;

      return diffHours > 0
        ? `${diffHours}h ${remainingMins}min`
        : `${diffMins} min`;
    };

    // Renderizar historial - Simplificado
    const renderizarHistorial = () => {
      const container = document.getElementById("historial-container");
      const titulo = document.getElementById("page-title");

      if (titulo)
        titulo.textContent = `Historial de conversacion de  ${telefonoCliente}`;

      if (!container) return;

      if (conversacionesFinalizadas.length === 0) {
        container.innerHTML = `
          <div class="block block-strong text-align-center">
            <p>Este cliente no tiene conversaciones finalizadas</p>
          </div>`;
        return;
      }

      const historialHTML = conversacionesFinalizadas
        .map((conv) => {
          const fecha = formatearFecha(conv.fechaActualizacion);
          const fechaCreacion = formatearFecha(conv.fechaCreacion);

          return `
          <div class="timeline-item">
            <div class="timeline-item-date">
              ${fecha.dia} <small>${fecha.mes}</small>
            </div>
            <div class="timeline-item-divider"></div>
            <div class="timeline-item-content">
              <div class="timeline-item-inner">
                <div class="timeline-item-title">
                  <strong>Conversaci√≥n #${conv.conversacionId}</strong>
                  <span style="float: right; font-size: 12px; color: #666;">
                    ${fecha.hora}
                  </span>
                </div>
                <div class="timeline-item-subtitle" style="color: #4CAF50;">
                  ‚úì Finalizada
                </div>
                <div class="timeline-item-text">
                  Iniciada: ${fechaCreacion.completa}<br>
                  Finalizada: ${fecha.completa}<br>
                  Mensajes: ${conv.nroMensajes || 0}
                </div>
                <div style="margin-top: 8px;">
                  <button class="button button-small button-outline" 
                          onclick="window.verConversacion(${
                            conv.conversacionId
                          })">
                    Ver Chat
                  </button>
                  <span style="margin-left: 10px; font-size: 12px; color: #666;">
                    Duraci√≥n: ${calcularDuracion(
                      conv.fechaCreacion,
                      conv.fechaActualizacion
                    )}
                  </span>
                </div>
              </div>
            </div>
          </div>`;
        })
        .join("");

      container.innerHTML = `<div class="timeline">${historialHTML}</div>`;
    };

    // Cargar datos - Simplificado
    const cargarHistorial = async (conversacionId) => {
      try {
        $f7.preloader.show();

        const conversaciones = await getConversaciones();
        const conversacionActual = conversaciones.find(
          (c) => c.conversacionId == conversacionId
        );

        if (!conversacionActual) {
          throw new Error("Conversaci√≥n no encontrada");
        }

        telefonoCliente = conversacionActual.telefono;

        // Filtrar conversaciones finalizadas del mismo cliente
        conversacionesFinalizadas = conversaciones
          .filter((c) => c.telefono === telefonoCliente && c.estadoId === 4)
          .sort(
            (a, b) =>
              new Date(b.fechaActualizacion.date) -
              new Date(a.fechaActualizacion.date)
          );

        renderizarHistorial();

        console.log(
          `üìã ${conversacionesFinalizadas.length} conversaciones finalizadas para ${telefonoCliente}`
        );
      } catch (error) {
        console.error("‚ùå Error:", error);
        $f7.dialog.alert("Error al cargar el historial");

        const container = document.getElementById("historial-container");
        if (container) {
          container.innerHTML = `
            <div class="block block-strong text-align-center">
              <p>Error al cargar el historial</p>
            </div>`;
        }
      } finally {
        $f7.preloader.hide();
      }
    };

    // Funciones globales
    window.verConversacion = (id) => {
      $f7.views.main.router.navigate(`/messages/${id}/`);
    };

    // Inicializaci√≥n
    $on("pageInit", (page) => {
      const conversacionId =
        page.route?.params?.conversacionId ||
        $f7.views.main.router.currentRoute?.params?.conversacionId;

      if (!conversacionId) {
        $f7.dialog.alert("ID de conversaci√≥n no v√°lido");
        return;
      }

      console.log(`üì± Cargando historial para conversaci√≥n: ${conversacionId}`);
      setTimeout(() => cargarHistorial(conversacionId), 300);
    });

    return $render;
  };
</script>

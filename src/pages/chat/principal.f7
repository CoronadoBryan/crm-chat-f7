<template>
  <div class="page" data-name="chat">
    <!-- NO navbar aquí - se maneja desde app.f7 -->

    <!-- Contenido principal -->
    <div class="page-content">
      <div class="block">
        <p>Área principal del chat</p>
        <p>Haz clic en el ícono de barras (☰) para abrir las conversaciones</p>
        <p>Haz clic en el ícono de persona para ver los datos del cliente</p>
      </div>
    </div>
  </div>
</template>

<script>
  export default (props, { $on, $f7 }) => {
    let conversaciones = [];
    let clientes = [];
    let perfiles = [];
    let socket = null;

    // Función para decodificar JWT token
    const decodeJWT = (token) => {
      try {
        const payload = token.split(".")[1];
        const decodedPayload = atob(payload);
        return JSON.parse(decodedPayload);
      } catch (error) {
        console.error("Error decodificando JWT:", error);
        return null;
      }
    };

    // Función para obtener el usuarioId desde el token o store
    const getUsuarioId = () => {
      let usuarioId = localStorage.getItem("usuarioId");
      if (usuarioId) {
        return Number(usuarioId);
      }

      const store = $f7.store;
      if (store && store.state && store.state.cuenta) {
        return store.state.cuenta.id;
      }

      const token = localStorage.getItem("token");
      if (token) {
        const decoded = decodeJWT(token);
        if (decoded) {
          const possibleIds = [
            decoded.id,
            decoded.user_id,
            decoded.userId,
            decoded.sub,
            decoded.data?.id,
            decoded.user?.id,
            decoded.inf?.id,
          ];

          for (const id of possibleIds) {
            if (id) {
              localStorage.setItem("usuarioId", id);
              return Number(id);
            }
          }
        }
      }

      return null;
    };

    $on("pageInit", async () => {
      try {
        console.log("Iniciando carga de página chat...");

        // Cambiar el panel a modo chat
        if (window.switchPanelContent) {
          window.switchPanelContent("chat");
        }

        // Actualizar la navbar del app principal para la página de chat
        const navbar = document.querySelector(
          ".view-main .navbar .navbar-inner"
        );
        if (navbar) {
          navbar.innerHTML = `
            <div class="left">
              <a href="#" class="link icon-only panel-open" data-panel="left">
                <i class="icon f7-icons">bars</i>
              </a>
            </div>
            <div class="title">Chat</div>
            <div class="right">
              <a href="#" class="link icon-only panel-open" data-panel="right">
                <i class="icon f7-icons">person</i>
              </a>
            </div>
          `;
        }

        const usuarioIdObtenido = getUsuarioId();
        console.log("Usuario ID obtenido:", usuarioIdObtenido);

        if (!usuarioIdObtenido) {
          $f7.toast
            .create({
              text: "No se pudo obtener la información del usuario.",
              closeTimeout: 3000,
            })
            .open();
          return;
        }

        // Imports dinámicos
        const services = await import("../../js/services/index.js");
        const { getClientes, getPerfiles, getConversaciones } = services;

        const socketModule = await import("socket.io-client");
        const io = socketModule.default;

        const components = await import("../../js/components/index.js");
        const { panelDerecho, panelIzquierdo } = components;

        // Conexión socket
        socket = io("http://82.180.163.151:3000");

        socket.on("conversacion_asignada", (data) => {
          const usuarioId = getUsuarioId();
          if (data.usuarioId && data.usuarioId == usuarioId) {
            cargarDatos();
            $f7.toast
              .create({
                text: "Nueva conversación recibida",
                closeTimeout: 2000,
                position: "top",
              })
              .open();
          }
        });

        socket.on("nuevo_mensaje", (data) => {
          cargarDatos();
        });

        const cargarDatos = async () => {
          try {
            console.log("Cargando datos...");

            const [conversacionesData, clientesData, perfilesData] =
              await Promise.all([
                getConversaciones(),
                getClientes(),
                getPerfiles(),
              ]);

            conversaciones = conversacionesData || [];
            clientes = clientesData || [];
            perfiles = perfilesData || [];

            console.log("Datos cargados:", {
              conversaciones: conversaciones.length,
              clientes: clientes.length,
              perfiles: perfiles.length,
            });

            renderConversaciones(conversaciones);
            initSearch();
          } catch (err) {
            console.error("Error al cargar datos:", err);
          }
        };

        const renderConversaciones = (convs) => {
          try {
            const usuarioId = getUsuarioId();
            if (!usuarioId || !panelIzquierdo) return;

            const convsFiltradas = convs.filter(
              (conv) => conv.usuarioId && conv.usuarioId == usuarioId
            );

            const lista = document.querySelector("#lista-conversaciones");
            if (!lista) return;

            panelIzquierdo({
              lista,
              conversaciones: convsFiltradas,
              clientes,
              perfiles,
              panelIzquierdo,
              panelDerecho,
              $f7,
              onSeleccionar: (convId) => {
                console.log("Conversación seleccionada:", convId);
              },
              conversacionSeleccionadaId: null,
            });
          } catch (error) {
            console.error("Error al renderizar conversaciones:", error);
          }
        };

        const initSearch = () => {
          const input = document.querySelector("#search-input");
          const clearBtn = document.querySelector("#clear-button");

          if (!input || !clearBtn) return;

          input.addEventListener("input", () => {
            const query = input.value.trim().toLowerCase();
            if (query === "") {
              renderConversaciones(conversaciones);
              return;
            }

            const usuarioId = getUsuarioId();
            const filtradas = conversaciones.filter((conv) => {
              if (!conv.telefono) return false;
              return (
                conv.usuarioId &&
                conv.usuarioId == usuarioId &&
                (conv.telefono.toLowerCase().includes(query) ||
                  conv.conversacionId.toString().includes(query))
              );
            });
            renderConversaciones(filtradas);
          });

          clearBtn.addEventListener("click", () => {
            input.value = "";
            renderConversaciones(conversaciones);
            input.focus();
          });
        };

        // Cargar datos inicialmente
        await cargarDatos();
      } catch (error) {
        console.error("Error general:", error);
      }
    });

    $on("pageBeforeRemove", () => {
      // Restaurar el panel a modo menú
      if (window.switchPanelContent) {
        window.switchPanelContent("menu");
      }

      // Restaurar la navbar original
      const navbar = document.querySelector(".view-main .navbar .navbar-inner");
      if (navbar) {
        navbar.innerHTML = `
          <div class="left">
            <a href="/dashboard" class="link">
              <img src="icons/logo.png" class="logo" alt="Logo" style="height: 28px;" />
            </a>
          </div>
          <div class="right">
            <a href="#" class="link popover-open" data-popover=".account-options">
              <span>Usuario</span>
              <i class="icon f7-icons">person_crop_circle</i>
            </a>
          </div>
        `;
      }

      if (socket) {
        socket.disconnect();
        socket = null;
      }
    });

    return $render;
  };
</script>

<template>
  <div class="page">
    <!-- Navbar -->
    <div class="subnavbar">
      <div class="navbar-bg"></div>
      <div class="navbar-inner sliding">
        <div class="left">
          <a
            href="#"
            class="link"
            @click="${() => $f7.views.main.router.navigate('/')}"
          >
            <i class="icon icon-back"></i>
            <span class="if-not-md">Volver</span>
          </a>
        </div>
        <div class="title">${telefono}</div>
        <div class="right">
          <button
            class="button button-fill color-red"
            @click="${handleFinalizarConversacion}"
            id="btn-finalizar"
          >
            Finalizar Conversación
          </button>
          <a class="link icon-only" @click="${handleHistorialFinalizada}">
            <i class="icon f7-icons">history</i>
            <i class="icon f7-icons">clock_fill</i>
          </a>
          <a href="#" class="link icon-only panel-open" data-panel="right">
            <i class="icon f7-icons if-not-md">menu</i>
            <i class="icon material-icons if-md">menu</i>
          </a>
        </div>
      </div>
    </div>

    <!-- Messagebar -->
    <div class="toolbar messagebar" id="messagebar-container">
      <div class="toolbar-inner">
        <button
          class="button button-outline color-blue quick-messages-button"
          style="width: auto; padding: 5px 10px; font-size: 12px"
          @click="${handleShowModal}"
        >
          Mensajes Rápidos
        </button>
        <div class="messagebar-area">
          <textarea
            class="resizable chat-message-input"
            placeholder="Escribe un mensaje..."
          ></textarea>
        </div>
        <a class="link icon-only" @click="${handleSendClick}">
          <i class="icon f7-icons">arrow_up_circle_fill</i>
        </a>
      </div>
    </div>

    <!-- Mensajes -->
    <div class="page-content messages-content" id="messages-content">
      <div class="messages"></div>
    </div>
  </div>
</template>

<style>
  .mensaje-finalizada-container {
    display: none;
    background: #f5f5f5;
    padding: 15px;
    text-align: center;
    border-bottom: 1px solid #ddd;
  }

  .mensaje-finalizada-text {
    margin: 0;
    color: #666;
    font-size: 14px;
  }

  .mensaje-finalizada-icon {
    color: #4caf50;
  }

  .resend-button {
    background-color: #ff9800;
    color: white;
    border: none;
    border-radius: 4px;
    padding: 5px 10px;
    cursor: pointer;
    font-size: 14px;
    margin-left: 5px;
  }
</style>

<script>
  import io from "socket.io-client";
  import moment from "moment";
  import "moment/locale/es";
  import {
    getMensajesPorConversacion,
    enviarMensaje,
    finalizarConversacion,
    mensajeLeido,
    getConversaciones,
  } from "../js/services/index.js";
  import { reenviarMensaje } from "../js/services/mensajeService.js";
  import { mostrarModalSimple } from "../js/components/index.js";

  export default (props, { $f7, $el, $on }) => {
    // --- Estado de la aplicación ---
    let messagebar,
      messages,
      socket = null;
    let mensajesData = [];
    let enviandoMensaje = false;
    let conversacionId,
      telefono = "Chat";
    let conversacionData = null;
    let conversacionFinalizada = false;

    // Configurar Moment.js
    moment.locale("es");

    // --- Utilidades ---
    const formatearFecha = (fecha) => {
      let dateString = fecha?.date || fecha;
      const momentDate = moment(dateString);

      if (!momentDate.isValid()) {
        console.error("Fecha inválida:", fecha);
        return { hora: "--:--", completa: "Fecha inválida" };
      }

      const ahora = moment();
      let hora;

      if (momentDate.isSame(ahora, "day")) {
        hora = momentDate.format("HH:mm");
      } else if (momentDate.isSame(moment().subtract(1, "day"), "day")) {
        hora = `Ayer ${momentDate.format("HH:mm")}`;
      } else if (momentDate.isSame(ahora, "week")) {
        const dia =
          momentDate.format("dddd").charAt(0).toUpperCase() +
          momentDate.format("dddd").slice(1);
        hora = `${dia} ${momentDate.format("HH:mm")}`;
      } else if (momentDate.isSame(ahora, "year")) {
        hora = `${momentDate.format("DD/MM")} ${momentDate.format("HH:mm")}`;
      } else {
        hora = `${momentDate.format("DD/MM/YY")} ${momentDate.format("HH:mm")}`;
      }

      return {
        hora: hora,
        completa: momentDate.format("DD/MM/YYYY HH:mm"),
        timestamp: momentDate.valueOf(),
      };
    };

    const crearFooterTiempo = (fecha) => {
      const tiempoFormateado = formatearFecha(fecha);
      return `<span style="font-size: 11px; color: #999; opacity: 0.7; font-weight: 400;">${tiempoFormateado.hora}</span>`;
    };

    const getEstadoIcono = (id_estado) => {
      const iconos = {
        1: ` <span style="font-size:12px;color:gray;">🕓</span>`,
        2: ` <span style="font-size:12px;color:gray;">✔</span>`,
        3: ` <span style="font-size:12px;color:rgba(139,69,19,0.6);">✔✔</span>`,
        4: ` <span style="font-size:12px;color:#2196f3;">✔✔</span>`,
      };
      return iconos[id_estado] || "";
    };

    const getElementosPorId = () => ({
      btnFinalizar: document.getElementById("btn-finalizar"),
      messagebarContainer: document.getElementById("messagebar-container"),
      mensajeFinalizada: document.getElementById("mensaje-finalizada"),
      messagesContent: document.getElementById("messages-content"),
    });

    const actualizarEstadoEnUI = (key, id_estado) => {
      const messageEls = $el.value[0].querySelectorAll(".message");
      const messageEl = messageEls[key];
      if (messageEl) {
        const textEl = messageEl.querySelector(".message-text");
        if (textEl) {
          const textoOriginal = textEl.innerText.replace(/✔.*/, "").trim();
          textEl.innerHTML = textoOriginal + getEstadoIcono(id_estado);
        }
      }
    };

    const actualizarUISegunEstado = () => {
      const elementos = getElementosPorId();

      if (conversacionFinalizada) {
        elementos.btnFinalizar?.style.setProperty("display", "none");
        elementos.messagebarContainer?.style.setProperty("display", "none");
        elementos.mensajeFinalizada?.style.setProperty("display", "block");
        elementos.messagesContent?.style.setProperty("paddingBottom", "0px");
      } else {
        elementos.btnFinalizar?.style.setProperty("display", "block");
        elementos.messagebarContainer?.style.setProperty("display", "block");
        elementos.mensajeFinalizada?.style.setProperty("display", "none");
        elementos.messagesContent?.style.setProperty("paddingBottom", "44px");
      }
    };

    // --- Funciones principales ---
    const handleFinalizarConversacion = () => {
      $f7.dialog.confirm(
        "¿Estás seguro de que deseas finalizar esta conversación?",
        "Finalizar Conversación",
        async () => {
          try {
            $f7.preloader.show();
            const usuarioId = Number(localStorage.getItem("usuarioId"));
            const response = await finalizarConversacion(
              conversacionId,
              usuarioId
            );

            if (response.success) {
              $f7.toast
                .create({
                  text: "Conversación finalizada exitosamente",
                  closeTimeout: 1000,
                  position: "top",
                })
                .open();

              if (window.cargarDatos) window.cargarDatos();

              // Espera un momento para mostrar el toast y luego recarga la página completamente
              setTimeout(() => {
                window.location.reload();
              }, 1000);

              return;
            } else {
              throw new Error(
                response.message || "Error al finalizar conversación"
              );
            }
          } catch (error) {
            $f7.dialog.alert(
              "No se pudo finalizar la conversación. Intenta nuevamente."
            );
          } finally {
            $f7.preloader.hide();
          }
        }
      );
    };

    const loadConversacionData = async () => {
      try {
        const conversaciones = await getConversaciones();
        conversacionData = conversaciones.find(
          (conv) => conv.conversacionId == conversacionId
        );

        if (conversacionData) {
          telefono = conversacionData.telefono || "Sin teléfono";
          conversacionFinalizada = conversacionData.estadoId === 4;

          console.log(
            `📊 Estado de conversación ${conversacionId}: ${conversacionData.estadoId} (Finalizada: ${conversacionFinalizada})`
          );

          const navbarTitle = document.querySelector(".navbar .title");
          if (navbarTitle) {
            navbarTitle.textContent =
              telefono + (conversacionFinalizada ? " (Finalizada)" : "");
          }

          actualizarUISegunEstado();
        } else {
          console.warn(
            `⚠️ No se encontraron datos para conversación ${conversacionId}`
          );
        }
      } catch (error) {
        console.error("❌ Error al cargar datos de conversación:", error);
      }
    };

    const handleHistorialFinalizada = () => {
      console.log(
        `📜 Navegando al historial de conversación: ${conversacionId}`
      );
      $f7.views.main.router.navigate(
        `/historial-finalizado/${conversacionId}/`
      );
    };

    const renderMessages = () => {
      if (!messages || !mensajesData.length) return;
      messages.removeMessages();

      const mensajesOrdenados = [...mensajesData].sort(
        (a, b) => new Date(a.created_at || 0) - new Date(b.created_at || 0)
      );

      const messagesToAdd = mensajesOrdenados.map((msg, index) => {
        const esEnviado = msg.contesta !== "cliente";
        const resendButton =
          msg.id_estado === 0
            ? `<button class='button button-fill color-orange resend-button' data-index='${index}'>Reenviar</button>`
            : "";

        return {
          text: esEnviado
            ? msg.mensaje + getEstadoIcono(msg.id_estado) + resendButton
            : msg.mensaje,
          type: esEnviado ? "sent" : "received",
          name: msg.contesta === "cliente" ? "Cliente" : "Yo",
          isHtml: true,
          footer: crearFooterTiempo(msg.created_at),
        };
      });

      messages.addMessages(messagesToAdd);

      // Agregar eventos a los botones de reenviar
      const resendButtons = document.querySelectorAll(".resend-button");
      resendButtons.forEach((button) => {
        button.addEventListener("click", (e) => {
          const index = e.target.getAttribute("data-index");
          handleResendMessage(index);
        });
      });

      console.log(
        `🎨 Renderizados ${messagesToAdd.length} mensajes con botones de reenvío cuando es necesario`
      );
    };

    const handleResendMessage = async (index) => {
      const msg = mensajesData[index];
      if (!msg || msg.id_estado !== 0) return;

      try {
        console.log(`🔄 Reintentando enviar mensaje con ID ${msg.id}`);
        await reenviarMensaje(msg.id);
        mensajesData[index].id_estado = 1; // Cambiar a estado enviado
        actualizarEstadoEnUI(index, 1);
        console.log(`✅ Mensaje con ID ${msg.id} reenviado correctamente`);
      } catch (error) {
        console.error(`❌ Error al reenviar mensaje con ID ${msg.id}:`, error);
        $f7.dialog.alert("No se pudo reenviar el mensaje. Intenta nuevamente.");
      }
    };

    const loadMessages = async () => {
      try {
        mensajesData = (await getMensajesPorConversacion(conversacionId)) || [];
        console.log(`📋 Cargados ${mensajesData.length} mensajes`);
        renderMessages();

        const mensajesNoLeidos = mensajesData.filter(
          (msg) => msg.id_estado === 3
        );
        if (mensajesNoLeidos.length > 0) {
          await Promise.all(
            mensajesNoLeidos.map((msg) => mensajeLeido(msg.id))
          );
          setTimeout(() => {
            if (window.cargarDatos) window.cargarDatos();
          }, 200);
        }
      } catch (error) {
        console.error("❌ Error al cargar mensajes:", error);
        $f7.dialog.alert("Error al cargar los mensajes");
      }
    };

    const sendMessage = async (messageText) => {
      console.log("🔹 Intentando enviar mensaje:", messageText);
      console.log("🔹 Estado enviandoMensaje:", enviandoMensaje);
      console.log("🔹 conversacionId actual:", conversacionId);

      if (!messageText?.trim()) {
        console.warn("⚠️ Mensaje vacío, no se envía.");
        return;
      }

      if (!conversacionId) {
        console.error(
          "❌ No hay conversacionId definido, no se puede enviar mensaje."
        );
        $f7.dialog.alert("No se puede enviar mensaje: conversación no válida.");
        return;
      }

      if (enviandoMensaje) {
        console.warn("⚠️ Ya se está enviando un mensaje, espera un momento.");
        return;
      }

      enviandoMensaje = true;
      console.log("📤 Enviando:", messageText);

      const ahora = moment();
      const tiempoActual = ahora.toISOString();

      // Agregar mensaje inmediatamente a la UI
      messages.addMessage({
        text: messageText,
        type: "sent",
        name: "Yo",
        footer: crearFooterTiempo(tiempoActual),
      });

      // Agregar a los datos locales
      mensajesData.push({
        id: null,
        mensaje: messageText,
        contesta: "usuario",
        id_estado: 1,
        created_at: tiempoActual,
      });

      try {
        const payload = {
          id_conversacion: conversacionId,
          mensaje: messageText,
          contesta: "usuario",
          id_mensaje_whatsapp: null,
          id_mensaje_responde: null,
          id_estado: 1,
        };
        console.log("🔹 Payload a enviar:", payload);
        await enviarMensaje(payload);
        setTimeout(() => {
          enviandoMensaje = false;
          console.log("🔹 enviandoMensaje liberado tras timeout");
        }, 2000);
        console.log("✅ Mensaje enviado correctamente");
      } catch (error) {
        $f7.dialog.alert("No se pudo enviar el mensaje");
        messages.removeMessage(messages.messages[messages.messages.length - 1]);
        mensajesData.pop();
        enviandoMensaje = false;
        console.error("❌ Error al enviar mensaje:", error);
      }
    };

    const handleSendClick = () => {
      // Busca todos los textareas visibles con la clase correcta
      const allTextareas = Array.from(
        document.querySelectorAll(".chat-message-input")
      ).filter(
        (ta) => ta.offsetParent !== null && !ta.disabled && !ta.readOnly
      );

      // Busca el que tiene el foco, si no, el último visible
      let textarea =
        allTextareas.find((ta) => document.activeElement === ta) ||
        allTextareas[allTextareas.length - 1];

      if (!textarea) return;

      const messageText = textarea.value.trim();
      if (!messageText) return;

      sendMessage(messageText);
      textarea.value = "";
      textarea.focus();
    };

    const handleKeyPress = (e) => {
      if (e.key === "Enter" && !e.shiftKey) {
        e.preventDefault();
        handleSendClick();
      }
    };

    // --- Socket ---
    const conectarSocket = () => {
      socket = io("https://vip2cars.pe:3000/");
      //socket = io("https://socket-5b6n.onrender.com");
      window.socket = socket;

      socket.on("nuevo_mensaje", async (data) => {
        console.log("📨 Mensaje recibido:", data);

        if (data.id_conversacion != conversacionId) return;
        if (data.contesta === "usuario" && enviandoMensaje) return;

        if (["cliente", "bot"].includes(data.contesta)) {
          const nuevoMensaje = {
            mensaje: data.mensaje || data.texto,
            contesta: data.contesta,
            created_at: data.created_at || moment().toISOString(),
            id: data.id,
            id_estado: data.id_estado,
          };
          mensajesData.push(nuevoMensaje);

          const footerTiempo = crearFooterTiempo(nuevoMensaje.created_at);

          if (data.contesta === "cliente") {
            messages.addMessage({
              text: nuevoMensaje.mensaje,
              type: "received",
              name: "Cliente",
              footer: footerTiempo,
            });
          } else if (data.contesta === "bot") {
            messages.addMessage({
              text: nuevoMensaje.mensaje + getEstadoIcono(data.id_estado),
              type: "sent",
              name: "Bot",
              isHtml: true,
              footer: footerTiempo,
            });
          }

          if (data.contesta === "cliente" && data.id) {
            try {
              console.log(
                `🔵 Marcando mensaje ${data.id} como leído automáticamente`
              );
              await mensajeLeido(data.id);
              setTimeout(() => {
                if (window.cargarDatos) window.cargarDatos();
              }, 200);
            } catch (error) {
              console.error("❌ Error al marcar mensaje como leído:", error);
            }
          }

          if (data.contesta === "cliente") {
            $f7.toast
              .create({
                text: "Nuevo mesdfgnsaje del cliente",
                closeTimeout: 2000,
                position: "top",
              })
              .open();
          }
        }
      });

      socket.on("mensaje_actualizado", (data) => {
        console.log("📦 Estado actualizado:", data);
        let idx = mensajesData.findIndex((msg) => msg.id === data.id);

        if (idx >= 0) {
          mensajesData[idx].id_estado = data.id_estado;
        } else {
          idx = mensajesData.findIndex((msg) => msg.id === null);
          if (idx >= 0) {
            mensajesData.splice(idx, 1);
            mensajesData.push({
              id: data.id,
              mensaje: data.mensaje,
              contesta: data.contesta,
              created_at: data.created_at || moment().toISOString(),
              id_estado: data.id_estado,
            });
          }
        }

        if (idx >= 0) actualizarEstadoEnUI(idx, data.id_estado);
      });
    };

    // --- Ciclo de vida ---
    $on("pageInit", async (page) => {
      console.log("🔄 pageInit ejecutado");
      // Limpia estado y destruye instancias anteriores
      if (messagebar) messagebar.destroy();
      if (messages) messages.destroy();
      if (socket) socket.disconnect();
      mensajesData = [];
      enviandoMensaje = false;

      conversacionId =
        page.route?.params?.conversacionId ||
        $f7.views.main.router.currentRoute?.params?.conversacionId;

      console.log("🔄 Nuevo conversacionId:", conversacionId);

      if (!conversacionId) {
        $f7.dialog.alert("No se pudo obtener el ID de conversación");
        return;
      }

      messagebar = $f7.messagebar.create({ el: $el.value.find(".messagebar") });
      messages = $f7.messages.create({ el: $el.value.find(".messages") });

      // Limpia mensajes del DOM inmediatamente
      messages.removeMessages();

      setTimeout(() => {
        const messagebarEl = $el.value[0].querySelector(".messagebar");
        let textarea = null;
        if (messagebarEl) {
          // Busca el textarea visible por clase
          textarea = Array.from(
            messagebarEl.querySelectorAll(".chat-message-input")
          ).find((ta) => ta.offsetParent !== null);
        }
        // Lógica para finalizadas: deshabilita textarea y botón si la conversación está finalizada
        if (textarea) {
          if (conversacionFinalizada) {
            textarea.disabled = true;
            textarea.readOnly = true;
          } else {
            textarea.disabled = false;
            textarea.readOnly = false;
            textarea.focus();
          }
          textarea.removeEventListener("keypress", handleKeyPress);
          textarea.addEventListener("keypress", handleKeyPress);
        }
        const sendBtn = messagebarEl
          ? messagebarEl.querySelector(".link.icon-only")
          : null;
        if (sendBtn) {
          if (conversacionFinalizada) {
            sendBtn.style.pointerEvents = "none";
            sendBtn.style.opacity = "0.5";
          } else {
            sendBtn.style.pointerEvents = "";
            sendBtn.style.opacity = "";
          }
          sendBtn.removeEventListener("click", handleSendClick);
          sendBtn.addEventListener("click", handleSendClick);
        }
      }, 0);

      await loadConversacionData();
      conectarSocket();
      await loadMessages();
    });

    $on("pageBeforeRemove", () => {
      enviandoMensaje = false;
      const messagebarEl = $el.value[0].querySelector(".messagebar");
      const textarea = messagebarEl
        ? messagebarEl.querySelector("#message-input")
        : null;
      if (textarea) textarea.removeEventListener("keypress", handleKeyPress);
      const sendBtn = messagebarEl
        ? messagebarEl.querySelector(".link.icon-only")
        : null;
      if (sendBtn) sendBtn.removeEventListener("click", handleSendClick);
      if (messagebar) messagebar.destroy();
      if (messages) messages.destroy();
      if (socket) socket.disconnect();
      mensajesData = [];
    });

    const handleShowModal = () => {
      mostrarModalSimple($f7, (mensaje) => {
        const textarea = document.querySelector(".chat-message-input");
        if (textarea) {
          textarea.value = mensaje;
          textarea.focus();
        }
      });
    };

    return $render;
  };
</script>

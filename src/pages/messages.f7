<template>
  <div class="page">
    <div class="navbar">
      <div class="navbar-bg"></div>
      <div class="navbar-inner sliding">
        <div class="left">
          <a href="#" class="link" @click="${() => $f7.views.main.router.navigate('/')}">
            <i class="icon icon-back"></i>
            <span class="if-not-md">Volver</span>
          </a>
        </div>
        <div class="title">${telefono}</div>
      </div>
    </div>

    <div class="toolbar messagebar">
      <div class="toolbar-inner">
        <div class="messagebar-area">
          <textarea
            class="resizable"
            placeholder="Escribe un mensaje..."
          ></textarea>
        </div>
        <a
          class="link icon-only demo-send-message-link"
          @click="${sendMessage}"
        >
          <i class="icon f7-icons">arrow_up_circle_fill</i>
        </a>
      </div>
    </div>

    <div class="page-content messages-content">
      <div class="messages">
        <!-- Los mensajes se cargarán aquí -->
      </div>
    </div>
  </div>
</template>

<script>
  import api from "../js/api.js";

  export default (props, { $f7, $el, $on }) => {
    // Variables principales
    let messagebar;
    let messages;
    let conversacionId;
    let telefono = "Chat";
    let mensajesData = [];

    // Carga los mensajes de la conversación desde el backend
    const loadMessages = async () => {
      try {
        const response = await api.get(
          `/mensaje/listar-por-conversacion/${conversacionId}`
        );
        mensajesData = response.data.data;
        renderMessages();
      } catch (error) {
        console.error("Error al cargar mensajes:", error);
        $f7.dialog.alert("Error al cargar los mensajes");
      }
    };

    // Renderiza los mensajes en el chat visual de Framework7
    const renderMessages = () => {
      if (!messages || !mensajesData.length) return;

      messages.removeMessages();

      // Prepara los mensajes para el componente visual, siempre con avatar
      const messagesToAdd = mensajesData.map((msg) => {
        const isReceived = msg.contesta === "cliente";
        return {
          text: msg.mensaje,
          type: isReceived ? "received" : "sent",
          name: isReceived ? "Cliente" : "Bot",
          avatar: "https://cdn.framework7.io/placeholder/people-100x100-9.jpg", // Avatar siempre visible
        };
      });

      messages.addMessages(messagesToAdd);
    };

    // Envía un mensaje
    const sendMessage = async () => {
      const text = messagebar.getValue().trim();
      if (!text) return;

      // Agrega el mensaje localmente al chat, siempre con avatar
      messages.addMessage({
        text: text,
        type: "sent",
        name: "Yo",
        avatar: "https://cdn.framework7.io/placeholder/people-100x100-9.jpg",
      });

      // Limpia el campo de texto
      messagebar.clear();
      messagebar.focus();

      // Envía el mensaje al backend
      try {
        await api.post("/mensaje/crear", {
          id_conversacion: conversacionId,
          mensaje: text,
          contesta: "usuario",
          id_mensaje_whatsapp: null,
          id_mensaje_responde: null,
          id_estado: 1,
        });
        // Si quieres recargar los mensajes del backend, descomenta la siguiente línea:
        // await loadMessages();
      } catch (error) {
        $f7.dialog.alert("No se pudo enviar el mensaje");
        console.error(error);
      }
    };

    // Inicialización al entrar a la página
    $on("pageInit", (page) => {
      conversacionId =
        page.route?.params?.conversacionId ||
        $f7.views.main.router.currentRoute?.params?.conversacionId;

      console.log("Conversación ID:", conversacionId);

      if (!conversacionId) {
        $f7.dialog.alert("No se pudo obtener el ID de conversación");
        return;
      }

      // Inicializa el messagebar y el componente visual de mensajes
      messagebar = $f7.messagebar.create({
        el: $el.value.find(".messagebar"),
      });
      messages = $f7.messages.create({
        el: $el.value.find(".messages"),
      });

      // Carga los mensajes de la conversación
      loadMessages();
    });

    // Limpia los componentes al salir de la página
    $on("pageBeforeRemove", () => {
      if (messagebar) messagebar.destroy();
      if (messages) messages.destroy();
    });

    return $render;
  };
</script>

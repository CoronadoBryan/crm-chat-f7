<template>
  <div class="page">
    <!-- Navbar -->
    <div class="subnavbar">
      <div class="navbar-bg"></div>
      <div class="navbar-inner sliding">
        <div class="left">
          <a href="#" class="link" @click="${() => $f7.views.main.router.navigate('/')}">
            <i class="icon icon-back"></i>
            <span class="if-not-md">Volver</span>
          </a>
        </div>
        <div class="title">${telefono}</div>
        <div class="right">
          <button class="button button-fill color-red" @click="${handleFinalizarConversacion}" id="btn-finalizar">
            Finalizar Conversación
          </button>
          <a class="link icon-only" @click="${handleHistorialFinalizada}">
            <i class="icon f7-icons">history</i>
            <i class="icon f7-icons">clock_fill</i>
          </a>
          <a href="#" class="link icon-only panel-open" data-panel="right">
            <i class="icon f7-icons if-not-md">menu</i>
            <i class="icon material-icons if-md">menu</i>
          </a>
        </div>
      </div>
    </div>

    <!-- Messagebar -->
    <div class="toolbar messagebar" id="messagebar-container">
      <div class="toolbar-inner">
        <a class="link icon-only" @click="${handleShowModal}" title="Mensajes Rápidos" style="margin-right: 8px;">
          <i class="icon f7-icons color-blue">text_bubble_fill</i>
        </a>
        <div class="messagebar-area">
          <div class="highlighted-input" aria-hidden="true"></div>
          <textarea
            class="resizable chat-message-input"
            placeholder="Escribe un mensaje..."
            autocomplete="off"
            spellcheck="false"
          ></textarea>
        </div>
        <a class="link icon-only" @click="${handleSendClick}">
          <i class="icon f7-icons">arrow_up_circle_fill</i>
        </a>
      </div>
    </div>

    <!-- Mensajes -->
    <div class="page-content messages-content" id="messages-content">
      <div class="messages"></div>
    </div>
  </div>
</template>

<script>
import io from "socket.io-client";
import moment from "moment";
import "moment/locale/es";
import {
  getMensajesPorConversacion,
  enviarMensaje,
  finalizarConversacion,
  mensajeLeido,
  getConversaciones,
  getAtajos,
  reemplazarAtajosEnMensaje
} from "../js/services/index.js";
import { reenviarMensaje } from "../js/services/mensajeService.js";
import { mostrarModalSimple } from "../js/components/index.js";
import Tribute from "tributejs";

export default (props, { $f7, $el, $on }) => {
  // --- Estado ---
  let messagebar, messages, socket = null;
  let mensajesData = [];
  let enviandoMensaje = false;
  let conversacionId, telefono = "Chat";
  let conversacionData = null;
  let conversacionFinalizada = false;
  let tribute = null;
  let atajos = [];

  // --- Utilidades ---
  moment.locale("es");

  const formatearFecha = (fecha) => {
    const dateString = fecha?.date || fecha;
    const momentDate = moment(dateString);
    if (!momentDate.isValid()) return { hora: "--:--", completa: "Fecha inválida" };
    const ahora = moment();
    let hora;
    if (momentDate.isSame(ahora, "day")) {
      hora = momentDate.format("HH:mm");
    } else if (momentDate.isSame(moment().subtract(1, "day"), "day")) {
      hora = `Ayer ${momentDate.format("HH:mm")}`;
    } else if (momentDate.isSame(ahora, "week")) {
      const dia = momentDate.format("dddd").charAt(0).toUpperCase() + momentDate.format("dddd").slice(1);
      hora = `${dia} ${momentDate.format("HH:mm")}`;
    } else if (momentDate.isSame(ahora, "year")) {
      hora = `${momentDate.format("DD/MM")} ${momentDate.format("HH:mm")}`;
    } else {
      hora = `${momentDate.format("DD/MM/YY")} ${momentDate.format("HH:mm")}`;
    }
    return {
      hora,
      completa: momentDate.format("DD/MM/YYYY HH:mm"),
      timestamp: momentDate.valueOf(),
    };
  };

  const crearFooterTiempo = (fecha) => {
    const tiempoFormateado = formatearFecha(fecha);
    return `<span style="font-size: 11px; color: #999; opacity: 0.7; font-weight: 400;">${tiempoFormateado.hora}</span>`;
  };

  const getEstadoIcono = (id_estado) => {
    const iconos = {
      1: ` <span style="font-size:12px;color:gray;">🕓</span>`,
      2: ` <span style="font-size:12px;color:gray;">✔</span>`,
      3: ` <span style="font-size:12px;color:rgba(139,69,19,0.6);">✔✔</span>`,
      4: ` <span style="font-size:12px;color:#2196f3;">✔✔</span>`,
    };
    return iconos[id_estado] || "";
  };

  // --- DOM helpers ---
  const getElementosDom = () => ({
    btnFinalizar: document.getElementById("btn-finalizar"),
    messagebarContainer: document.getElementById("messagebar-container"),
    messagesContent: document.getElementById("messages-content"),
  });

  // --- UI helpers ---
  const actualizarEstadoEnUI = (index, id_estado) => {
    const messageEls = $el.value[0].querySelectorAll(".message");
    const messageEl = messageEls[index];
    if (messageEl) {
      const textEl = messageEl.querySelector(".message-text");
      if (textEl) {
        const textoOriginal = textEl.innerText.replace(/✔.*/, "").trim();
        textEl.innerHTML = textoOriginal + getEstadoIcono(id_estado);
      }
    }
  };

  const actualizarUISegunEstado = () => {
    const elementos = getElementosDom();
    if (conversacionFinalizada) {
      elementos.btnFinalizar?.style.setProperty("display", "none");
      elementos.messagebarContainer?.style.setProperty("display", "none");
      elementos.messagesContent?.style.setProperty("paddingBottom", "0px");
    } else {
      elementos.btnFinalizar?.style.setProperty("display", "block");
      elementos.messagebarContainer?.style.setProperty("display", "block");
      elementos.messagesContent?.style.setProperty("paddingBottom", "44px");
    }
  };

  // --- Conversación ---
  const handleFinalizarConversacion = () => {
    $f7.dialog.confirm(
      "¿Estás seguro de que deseas finalizar esta conversación?",
      "Finalizar Conversación",
      async () => {
        try {
          $f7.preloader.show();
          const usuarioId = Number(localStorage.getItem("usuarioId"));
          const response = await finalizarConversacion(conversacionId, usuarioId);
          if (response.success) {
            $f7.toast.create({
              text: "Conversación finalizada exitosamente",
              closeTimeout: 1000,
              position: "top",
            }).open();
            if (window.cargarDatos) window.cargarDatos();
            setTimeout(() => window.location.reload(), 1000);
          } else {
            throw new Error(response.message || "Error al finalizar conversación");
          }
        } catch (error) {
          $f7.dialog.alert("No se pudo finalizar la conversación. Intenta nuevamente.");
        } finally {
          $f7.preloader.hide();
        }
      }
    );
  };

  const loadConversacionData = async () => {
    try {
      const conversaciones = await getConversaciones();
      conversacionData = conversaciones.find(conv => conv.conversacionId == conversacionId);
      if (conversacionData) {
        telefono = conversacionData.telefono || "Sin teléfono";
        conversacionFinalizada = conversacionData.estadoId === 4;
        const navbarTitle = document.querySelector(".navbar .title");
        if (navbarTitle) {
          navbarTitle.textContent = telefono + (conversacionFinalizada ? " (Finalizada)" : "");
        }
        actualizarUISegunEstado();
      }
    } catch (error) {
      console.error("❌ Error al cargar datos de conversación:", error);
    }
  };

  const handleHistorialFinalizada = () => {
    $f7.views.main.router.navigate(`/historial-finalizado/${conversacionId}/`);
  };

  // --- Mensajes ---
  const renderMessages = () => {
    if (!messages || !mensajesData.length) return;
    messages.removeMessages();
    const mensajesOrdenados = [...mensajesData].sort(
      (a, b) => new Date(a.created_at || 0) - new Date(b.created_at || 0)
    );
    const messagesToAdd = mensajesOrdenados.map((msg, index) => {
      const esEnviado = msg.contesta !== "cliente";
      const resendButton = msg.id_estado === 0 
        ? `<button class='button button-fill color-orange resend-button' data-index='${index}'>Reenviar</button>`
        : "";
      return {
        text: esEnviado 
          ? msg.mensaje + getEstadoIcono(msg.id_estado) + resendButton
          : msg.mensaje,
        type: esEnviado ? "sent" : "received",
        name: msg.contesta === "cliente" ? "Cliente" : "Yo",
        isHtml: true,
        footer: crearFooterTiempo(msg.created_at),
      };
    });
    messages.addMessages(messagesToAdd);
    document.querySelectorAll(".resend-button").forEach(button => {
      button.addEventListener("click", (e) => {
        const index = e.target.getAttribute("data-index");
        handleResendMessage(index);
      });
    });
  };

  const handleResendMessage = async (index) => {
    const msg = mensajesData[index];
    if (!msg || msg.id_estado !== 0) {
      $f7.dialog.alert('Este mensaje ya no se puede reenviar');
      return;
    }
    const ahora = moment();
    const tiempoMensaje = moment(msg.created_at);
    const diferencia = ahora.diff(tiempoMensaje, 'seconds');
    if (diferencia < 5) {
      $f7.dialog.alert('Espera un momento antes de reenviar');
      return;
    }
    try {
      $f7.preloader.show();
      const botonReenviar = document.querySelector(`[data-index="${index}"]`);
      if (botonReenviar) {
        botonReenviar.disabled = true;
        botonReenviar.textContent = 'Enviando...';
      }
      await reenviarMensaje(msg.id);
      mensajesData[index].id_estado = 1;
      actualizarEstadoEnUI(index, 1);
      $f7.toast.create({
        text: 'Mensaje reenviado correctamente',
        position: 'top',
        closeTimeout: 2000
      }).open();
    } catch (error) {
      const errorMessage = error.response?.data?.error || 
                          error.response?.data?.message || 
                          'No se pudo reenviar el mensaje';
      $f7.dialog.alert(`Error: ${errorMessage}`);
      const botonReenviar = document.querySelector(`[data-index="${index}"]`);
      if (botonReenviar) {
        botonReenviar.disabled = false;
        botonReenviar.textContent = 'Reenviar';
      }
    } finally {
      $f7.preloader.hide();
    }
  };

  const loadMessages = async () => {
    try {
      mensajesData = (await getMensajesPorConversacion(conversacionId)) || [];
      renderMessages();
      // Marcar mensajes no leídos como leídos
      const mensajesNoLeidos = mensajesData.filter(msg => msg.id_estado === 3);
      if (mensajesNoLeidos.length > 0) {
        await Promise.all(mensajesNoLeidos.map(msg => mensajeLeido(msg.id)));
        setTimeout(() => {
          if (window.cargarDatos) window.cargarDatos();
        }, 200);
      }
    } catch (error) {
      $f7.dialog.alert("Error al cargar los mensajes");
    }
  };

  // --- Envío de mensajes ---
  const sendMessage = async (messageText) => {
    if (!messageText?.trim() || !conversacionId || enviandoMensaje) return;
    enviandoMensaje = true;
    // Reemplazar atajos antes de enviar
    const mensajeProcesado = await reemplazarAtajosEnMensaje(messageText, conversacionId);
    const tiempoActual = moment().toISOString();
    messages.addMessage({
      text: mensajeProcesado,
      type: "sent",
      name: "Yo",
      footer: crearFooterTiempo(tiempoActual),
    });
    mensajesData.push({
      id: null,
      mensaje: mensajeProcesado,
      contesta: "usuario",
      id_estado: 1,
      created_at: tiempoActual,
    });
    try {
      const payload = {
        id_conversacion: conversacionId,
        mensaje: mensajeProcesado,
        contesta: "usuario",
        id_mensaje_whatsapp: null,
        id_mensaje_responde: null,
        id_estado: 1,
      };
      await enviarMensaje(payload);
      setTimeout(() => { enviandoMensaje = false; }, 2000);
    } catch (error) {
      $f7.dialog.alert("No se pudo enviar el mensaje");
      messages.removeMessage(messages.messages[messages.messages.length - 1]);
      mensajesData.pop();
      enviandoMensaje = false;
    }
  };

  // --- UI: textarea y eventos ---
  const getTextareaActivo = () => {
    const allTextareas = Array.from(document.querySelectorAll(".chat-message-input"))
      .filter(ta => ta.offsetParent !== null && !ta.disabled && !ta.readOnly);
    return allTextareas.find(ta => document.activeElement === ta) || 
           allTextareas[allTextareas.length - 1];
  };

  const handleSendClick = () => {
    const textarea = getTextareaActivo();
    if (!textarea) return;
    const messageText = textarea.value.trim();
    if (!messageText) return;
    sendMessage(messageText);
    textarea.value = "";
    textarea.focus();
    actualizarHighlightTextarea();
  };

  const handleKeyPress = (e) => {
    if (e.key === "Enter" && !e.shiftKey) {
      e.preventDefault();
      handleSendClick();
    }
  };

  // --- Plantillas rápidas ---
  const handleShowModal = () => {
    if (navigator.vibrate) navigator.vibrate(50);
    mostrarModalSimple($f7, (mensaje) => {
      const textarea = getTextareaActivo();
      if (textarea) {
        textarea.value = mensaje;
        textarea.focus();
        actualizarHighlightTextarea();
      }
    });
  };

  // --- Socket ---
  const conectarSocket = () => {
    socket = io("https://socket-5b6n.onrender.com");
    window.socket = socket;
    socket.on("nuevo_mensaje", async (data) => {
      if (data.id_conversacion != conversacionId || 
         (data.contesta === "usuario" && enviandoMensaje)) return;
      if (["cliente", "bot"].includes(data.contesta)) {
        const nuevoMensaje = {
          mensaje: data.mensaje || data.texto,
          contesta: data.contesta,
          created_at: data.created_at || moment().toISOString(),
          id: data.id,
          id_estado: data.id_estado,
        };
        mensajesData.push(nuevoMensaje);
        const footerTiempo = crearFooterTiempo(nuevoMensaje.created_at);
        if (data.contesta === "cliente") {
          messages.addMessage({
            text: nuevoMensaje.mensaje,
            type: "received",
            name: "Cliente",
            footer: footerTiempo,
          });
          // Marcar como leído automáticamente
          if (data.id) {
            try {
              await mensajeLeido(data.id);
              setTimeout(() => {
                if (window.cargarDatos) window.cargarDatos();
              }, 200);
            } catch (error) {}
          }
          $f7.toast.create({
            text: "Nuevo mensaje del cliente",
            closeTimeout: 2000,
            position: "top",
          }).open();
        } else if (data.contesta === "bot") {
          messages.addMessage({
            text: nuevoMensaje.mensaje + getEstadoIcono(data.id_estado),
            type: "sent",
            name: "Bot",
            isHtml: true,
            footer: footerTiempo,
          });
        }
      }
    });
    socket.on("mensaje_actualizado", (data) => {
      let idx = mensajesData.findIndex(msg => msg.id === data.id);
      if (idx >= 0) {
        mensajesData[idx].id_estado = data.id_estado;
      } else {
        idx = mensajesData.findIndex(msg => msg.id === null);
        if (idx >= 0) {
          mensajesData.splice(idx, 1);
          mensajesData.push({
            id: data.id,
            mensaje: data.mensaje,
            contesta: data.contesta,
            created_at: data.created_at || moment().toISOString(),
            id_estado: data.id_estado,
          });
        }
      }
      if (idx >= 0) actualizarEstadoEnUI(idx, data.id_estado);
    });
  };

  // --- Tribute.js ---
  const configurarTribute = () => {
    setTimeout(() => {
      const messagebarEl = $el.value[0].querySelector(".messagebar");
      if (!messagebarEl) return;
      const textarea = messagebarEl.querySelector(".chat-message-input");
      if (!textarea) return;
      if (tribute && textarea._tribute) {
        tribute.detach(textarea);
        textarea._tribute = null;
      }
      tribute = new Tribute({
        trigger: "@",
        values: atajos.map(a => ({
          key: a.codigo.replace("@", ""),
          value: a.codigo,
          descripcion: a.descripcion
        })),
        selectTemplate: function (item) {
          return item.original.value;
        },
        menuItemTemplate: function (item) {
          return `
            <div style="display:flex;flex-direction:column;">
              <span><b>@${item.string}</b></span>
              <span style="font-size:12px;color:#888;">${item.original.descripcion}</span>
            </div>
          `;
        },
        lookup: "key",
        fillAttr: "value",
        menuShowMinLength: 0
      });
      tribute.attach(textarea);
      textarea._tribute = tribute;
    }, 200);
  };

  // --- Resaltado de atajos en textarea ---
  function actualizarHighlightTextarea() {
    const textarea = document.querySelector('.chat-message-input');
    const highlightDiv = document.querySelector('.highlighted-input');
    if (!textarea || !highlightDiv) return;
    let text = textarea.value
      .replace(/&/g, "&amp;")
      .replace(/</g, "&lt;")
      .replace(/>/g, "&gt;")
      .replace(/\n$/g, "\n ");
    text = text.replace(/(@\w+)/g, '<span class="atajo-highlight">$1</span>');
    highlightDiv.innerHTML = text;
    highlightDiv.style.height = textarea.scrollHeight + "px";
  }

  // --- Eventos del messagebar ---
  const configurarEventosMessagebar = () => {
    setTimeout(() => {
      const messagebarEl = $el.value[0].querySelector(".messagebar");
      if (!messagebarEl) return;
      const textarea = messagebarEl.querySelector(".chat-message-input");
      const sendBtn = messagebarEl.querySelector(".link.icon-only");
      if (textarea) {
        textarea.removeEventListener("input", actualizarHighlightTextarea);
        textarea.addEventListener("input", actualizarHighlightTextarea);
        if (conversacionFinalizada) {
          textarea.disabled = true;
          textarea.readOnly = true;
        } else {
          textarea.disabled = false;
          textarea.readOnly = false;
          textarea.focus();
        }
        textarea.removeEventListener("keypress", handleKeyPress);
        textarea.addEventListener("keypress", handleKeyPress);
      }
      if (sendBtn) {
        if (conversacionFinalizada) {
          sendBtn.style.pointerEvents = "none";
          sendBtn.style.opacity = "0.5";
        } else {
          sendBtn.style.pointerEvents = "";
          sendBtn.style.opacity = "";
        }
        sendBtn.removeEventListener("click", handleSendClick);
        sendBtn.addEventListener("click", handleSendClick);
      }
    }, 100);
  };

  // --- Limpieza ---
  const limpiarRecursos = () => {
    enviandoMensaje = false;
    const messagebarEl = $el.value[0]?.querySelector(".messagebar");
    if (messagebarEl) {
      const textarea = messagebarEl.querySelector(".chat-message-input");
      const sendBtn = messagebarEl.querySelector(".link.icon-only");
      if (textarea) {
        textarea.removeEventListener("keypress", handleKeyPress);
        textarea.removeEventListener("input", actualizarHighlightTextarea);
      }
      if (sendBtn) sendBtn.removeEventListener("click", handleSendClick);
    }
    if (messagebar) messagebar.destroy();
    if (messages) messages.destroy();
    if (socket) socket.disconnect();
    mensajesData = [];
  };

  // --- Ciclo de vida ---
  $on("pageInit", async (page) => {
    limpiarRecursos();
    conversacionId = page.route?.params?.conversacionId || 
                   $f7.views.main.router.currentRoute?.params?.conversacionId;
    if (!conversacionId) {
      $f7.dialog.alert("No se pudo obtener el ID de conversación");
      return;
    }
    messagebar = $f7.messagebar.create({ el: $el.value.find(".messagebar") });
    messages = $f7.messages.create({ el: $el.value.find(".messages") });
    messages.removeMessages();
    configurarEventosMessagebar();
    await loadConversacionData();
    conectarSocket();
    await loadMessages();
    atajos = await getAtajos();
    configurarTribute();
  });

  $on("pageBeforeRemove", limpiarRecursos);

  return $render;
};
</script>

<style>
.messagebar-area {
  position: relative;
}
.highlighted-input {
  position: absolute;
  top: 0; left: 0; right: 0; bottom: 0;
  color: transparent;
  white-space: pre-wrap;
  word-break: break-word;
  pointer-events: none;
  font: inherit;
  background: none;
  z-index: 1;
  padding: 8px 12px;
  min-height: 38px;
}
.chat-message-input {
  position: relative;
  background: transparent;
  z-index: 2;
  color: #222;
}
.highlighted-input .atajo-highlight {
  color: #1976d2;
  background: #e3f2fd;
  border-radius: 3px;
  padding: 0 2px;
}

/* Tribute.js custom styles */
.tribute-container {
  font-family: inherit;
  border-radius: 6px !important;
  box-shadow: 0 4px 16px rgba(0,0,0,0.10);
  border: 1px solid #1976d2 !important;
  overflow: hidden;
}
.tribute-container ul {
  margin: 0;
  padding: 0;
  background: #fff;
}
.tribute-container li {
  padding: 10px 16px;
  border-bottom: 1px solid #f0f0f0;
  cursor: pointer;
  font-size: 15px;
  transition: background 0.2s;
}
.tribute-container li:last-child {
  border-bottom: none;
}
.tribute-container li.highlight, .tribute-container li:hover {
  background: #e3f2fd !important;
  color: #1976d2 !important;
}
.tribute-container b {
  color: #1976d2;
}
</style>
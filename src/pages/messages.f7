<template>
  <div class="page">
    <!-- Navbar -->
    <div class="subnavbar">
      <div class="navbar-bg"></div>
      <div class="navbar-inner sliding">
        <div class="left">
          <a
            href="#"
            class="link"
            @click="${() => $f7.views.main.router.navigate('/')}"
          >
            <i class="icon icon-back"></i>
            <span class="if-not-md">Volver</span>
          </a>
        </div>
        <div class="title">${telefono}</div>
        <div class="right">
          <!-- ‚úÖ BOT√ìN DE LLAMADA -->
          <a 
            href="#" 
            class="link icon-only" 
            @click="${handlePhoneCall}"
            id="btn-llamada"
            title="Llamar"
            style="margin-right: 8px;"
          >
            <i class="icon f7-icons" id="phone-icon" style="color: #333;">phone</i>
          </a>
          
          <button
            class="button button-fill color-red"
            @click="${handleFinalizarConversacion}"
            id="btn-finalizar"
          >
            Finalizar Conversaci√≥n
          </button>
          <a class="link icon-only" @click="${handleHistorialFinalizada}">
            <i class="icon f7-icons">history</i>
            <i class="icon f7-icons">clock_fill</i>
          </a>
          <a href="#" class="link icon-only panel-open" data-panel="right">
            <i class="icon f7-icons if-not-md">menu</i>
            <i class="icon material-icons if-md">menu</i>
          </a>
        </div>
      </div>
    </div>

    <!-- Messagebar -->
    <div class="toolbar messagebar" id="messagebar-container">
      <div class="toolbar-inner">
        <a
          class="link icon-only"
          @click="${handleShowModal}"
          title="Mensajes R√°pidos"
          style="margin-right: 8px;"
        >
          <i class="icon f7-icons color-blue">text_bubble_fill</i>
        </a>
        <div class="messagebar-area">
          <textarea
            class="resizable chat-message-input"
            placeholder="Escribe un mensaje..."
          ></textarea>
        </div>
        <a class="link icon-only" @click="${handleSendClick}">
          <i class="icon f7-icons">arrow_up_circle_fill</i>
        </a>
      </div>
    </div>

    <!-- Mensajes -->
    <div class="page-content messages-content" id="messages-content">
      <div class="messages"></div>
    </div>
  </div>
</template>

<script>
  import io from "socket.io-client";
  import moment from "moment";
  import "moment/locale/es";
  import {
    getMensajesPorConversacion,
    enviarMensaje,
    finalizarConversacion,
    mensajeLeido,
    getConversaciones,
  } from "../js/services/index.js";
  import { reenviarMensaje } from "../js/services/mensajeService.js";
  import { mostrarModalSimple } from "../js/components/index.js";

  export default (props, { $f7, $el, $on }) => {
    // ‚úÖ ESTADO DE LA APLICACI√ìN
    let messagebar, messages, socket = null;
    let mensajesData = [];
    let enviandoMensaje = false;
    let conversacionId, telefono = "Chat";
    let conversacionData = null;
    let conversacionFinalizada = false;

    // Variables de estado para llamadas
    let zadarmaReady = false;
    let callInProgress = false;

    // ‚úÖ CONFIGURACI√ìN INICIAL
    moment.locale("es");

    // Extraer n√∫mero limpio para llamadas
    const extractPhoneNumber = (telefono) => {
      if (!telefono || telefono === "Chat" || telefono === "Sin tel√©fono") {
        return null;
      }
      
      const numeroLimpio = telefono.replace(/\D/g, '');
      
      if (numeroLimpio.length < 9) {
        return null;
      }
      
      if (numeroLimpio.startsWith('51') && numeroLimpio.length >= 11) {
        return numeroLimpio;
      }
      
      if (numeroLimpio.length === 9) {
        return '51' + numeroLimpio;
      }
      
      return numeroLimpio;
    };

    // ‚úÖ ACTUALIZAR ICONO CON COLORES DIN√ÅMICOS
    const updatePhoneIcon = (estado) => {
      const phoneIcon = document.getElementById('phone-icon');
      const btnLlamada = document.getElementById('btn-llamada');
      
      if (!phoneIcon || !btnLlamada) return;

      // Remover animaciones previas
      phoneIcon.classList.remove('phone-pulse', 'phone-ring');

      switch (estado) {
        case 'calling':
          phoneIcon.style.color = '#ff9500'; // Naranja
          phoneIcon.textContent = 'phone_fill';
          phoneIcon.classList.add('phone-pulse');
          btnLlamada.title = 'Llamando...';
          break;
          
        case 'ringing':
          phoneIcon.style.color = '#007aff'; // Azul
          phoneIcon.textContent = 'phone_fill';
          phoneIcon.classList.add('phone-ring');
          btnLlamada.title = 'Timbrando...';
          break;
          
        case 'active':
          phoneIcon.style.color = '#34c759'; // Verde brillante
          phoneIcon.textContent = 'phone_fill';
          btnLlamada.title = 'Colgar llamada';
          break;
          
        case 'error':
          phoneIcon.style.color = '#ff3b30'; // Rojo
          phoneIcon.textContent = 'phone_down_fill';
          btnLlamada.title = 'Error en llamada';
          break;
          
        default:
          phoneIcon.style.color = '#333'; // Negro
          phoneIcon.textContent = 'phone';
          btnLlamada.title = 'Llamar';
          break;
      }
    };

    // ‚úÖ FUNCI√ìN PRINCIPAL DE LLAMADA CON LOGS DETALLADOS
    const handlePhoneCall = async () => {
      console.log("üìû ========== INICIO DIAGN√ìSTICO DE LLAMADA ==========");
      console.log("üìû Bot√≥n de llamada presionado");
      console.log("üîç DIAGN√ìSTICO INICIAL:");
      console.log("  - zadarmaReady:", zadarmaReady);
      console.log("  - callInProgress:", callInProgress);
      console.log("  - window.zadarmaWidget existe:", !!window.zadarmaWidget);
      console.log("  - window.zadarmaWidgetFn existe:", !!window.zadarmaWidgetFn);

      // Si hay llamada activa, colgar
      if (callInProgress) {
        console.log("üìû Colgar llamada activa detectada");
        
        try {
          if (window.zadarmaWidget && typeof window.zadarmaWidget.hangup === 'function') {
            console.log("üîß Colgando con widget...");
            window.zadarmaWidget.hangup();
          }
          
          callInProgress = false;
          updatePhoneIcon('default');
          
          $f7.toast.create({
            text: 'Llamada terminada',
            position: 'top',
            closeTimeout: 2000
          }).open();
          
        } catch (error) {
          console.error("‚ùå Error al colgar:", error);
          callInProgress = false;
          updatePhoneIcon('default');
        }
        return;
      }

      // Obtener n√∫mero
      const numeroLimpio = extractPhoneNumber(telefono);
      console.log("üìã DATOS DE LLAMADA:");
      console.log("  - telefono original:", telefono);
      console.log("  - numeroLimpio:", numeroLimpio);
      
      if (!numeroLimpio) {
        console.log("‚ùå N√öMERO INV√ÅLIDO");
        $f7.dialog.alert(`No se encontr√≥ un n√∫mero v√°lido para llamar.\n\nN√∫mero actual: "${telefono}"`);
        return;
      }

      console.log(`üéØ INICIANDO LLAMADA REAL A: ${numeroLimpio}`);
      updatePhoneIcon('calling');

      // ‚úÖ VERIFICAR WIDGET EXISTENTE
      if (window.zadarmaWidget) {
        console.log("‚úÖ Widget encontrado!");
        console.log("  - M√©todos:", Object.keys(window.zadarmaWidget));
        
        if (typeof window.zadarmaWidget.call === 'function') {
          console.log("üöÄ INTENTANDO LLAMADA CON WIDGET EXISTENTE");
          
          try {
            console.log(`  - Ejecutando: window.zadarmaWidget.call("${numeroLimpio}")`);
            const resultado = window.zadarmaWidget.call(numeroLimpio);
            
            console.log("  - Resultado:", resultado);
            callInProgress = true;
            updatePhoneIcon('active');
            
            console.log("‚úÖ LLAMADA INICIADA EXITOSAMENTE");
            
            $f7.toast.create({
              text: `üìû Llamando a ${numeroLimpio}... (REAL)`,
              position: 'top',
              closeTimeout: 3000
            }).open();

            // Auto-reset despu√©s de 60 segundos
            setTimeout(() => {
              if (callInProgress) {
                console.log("‚è∞ Auto-reset por timeout");
                callInProgress = false;
                updatePhoneIcon('default');
              }
            }, 60000);
            
            return;
            
          } catch (error) {
            console.error("‚ùå ERROR AL LLAMAR:", error);
            updatePhoneIcon('error');
            setTimeout(() => updatePhoneIcon('default'), 3000);
          }
        }
      }

      // ‚úÖ CREAR WIDGET SI NO EXISTE
      if (window.zadarmaWidgetFn) {
        console.log("üöÄ Creando widget din√°micamente...");
        
        try {
          window.zadarmaWidgetFn(
            '74f6a50ca3cb609de24eac1af3eee1f48e7aa6b9df983786525da39d8155ea3067b649dccf9900bc4c0ce1ef4dc91a3960b743e96c70bc5b01b4a7241640af39',
            '517653-100',
            'square',
            'es',
            true,
            { right: '10px', bottom: '5px' }
          );
          
          console.log("‚úÖ zadarmaWidgetFn ejecutado");
          
          // Esperar a que se cree el widget
          let intentos = 0;
          const verificarWidget = () => {
            intentos++;
            console.log(`üîç Verificando widget (intento ${intentos}/20)`);
            
            if (window.zadarmaWidget && typeof window.zadarmaWidget.call === 'function') {
              console.log("üéâ WIDGET CREADO!");
              
              try {
                window.zadarmaWidget.call(numeroLimpio);
                callInProgress = true;
                updatePhoneIcon('active');
                
                console.log("‚úÖ LLAMADA REAL EXITOSA!");
                
                $f7.toast.create({
                  text: `üìû Llamando a ${numeroLimpio}... (WIDGET NUEVO)`,
                  position: 'top',
                  closeTimeout: 3000
                }).open();

                // Ocultar widget despu√©s de usar
                setTimeout(() => {
                  const widgets = document.querySelectorAll('[id*="zadarma"], [class*="zadarma"]');
                  widgets.forEach(w => {
                    w.style.cssText = `
                      position: fixed !important;
                      top: -9999px !important;
                      left: -9999px !important;
                      opacity: 0 !important;
                      pointer-events: none !important;
                      z-index: -9999 !important;
                      visibility: hidden !important;
                    `;
                  });
                }, 2000);
                
              } catch (callError) {
                console.error("‚ùå ERROR EN LLAMADA CON WIDGET NUEVO:", callError);
                updatePhoneIcon('error');
                setTimeout(() => updatePhoneIcon('default'), 3000);
                
                $f7.dialog.alert(`Error al llamar: ${callError.message}`);
              }
              
            } else if (intentos < 20) {
              setTimeout(verificarWidget, 1000);
            } else {
              console.log("‚ùå TIMEOUT: Widget nunca se cre√≥");
              updatePhoneIcon('error');
              setTimeout(() => updatePhoneIcon('default'), 3000);
              
              $f7.dialog.alert('El widget no se pudo inicializar correctamente');
            }
          };
          
          setTimeout(verificarWidget, 2000);
          
        } catch (error) {
          console.error("‚ùå ERROR EJECUTANDO zadarmaWidgetFn:", error);
          updatePhoneIcon('error');
          setTimeout(() => updatePhoneIcon('default'), 3000);
          
          $f7.dialog.alert(`Error: ${error.message}`);
        }
        
      } else {
        console.log("‚ùå zadarmaWidgetFn NO DISPONIBLE");
        updatePhoneIcon('error');
        setTimeout(() => updatePhoneIcon('default'), 3000);
        
        $f7.dialog.alert('Sistema de llamadas no disponible');
      }
      
      console.log("üìû ========== FIN DIAGN√ìSTICO ==========");
    };

    // ‚úÖ CARGAR SCRIPTS DE ZADARMA DIN√ÅMICAMENTE
    const cargarScriptsZadarma = () => {
      return new Promise((resolve, reject) => {
        console.log("üì¶ Cargando scripts de Zadarma...");
        
        const script1 = document.createElement('script');
        script1.src = 'https://my.zadarma.com/webphoneWebRTCWidget/v9/js/loader-phone-lib.js?sub_v=1&t=' + Date.now();
        
        script1.onload = () => {
          console.log("‚úÖ Script 1 cargado");
          
          const script2 = document.createElement('script');
          script2.src = 'https://my.zadarma.com/webphoneWebRTCWidget/v9/js/loader-phone-fn.js?sub_v=1&t=' + Date.now();
          
          script2.onload = () => {
            console.log("‚úÖ Script 2 cargado");
            console.log("  - zadarmaWidgetFn disponible:", !!window.zadarmaWidgetFn);
            resolve();
          };
          
          script2.onerror = (error) => {
            console.error("‚ùå Error cargando script 2:", error);
            reject(new Error('Error cargando script 2'));
          };
          
          document.head.appendChild(script2);
        };
        
        script1.onerror = (error) => {
          console.error("‚ùå Error cargando script 1:", error);
          reject(new Error('Error cargando script 1'));
        };
        
        document.head.appendChild(script1);
      });
    };

    // ‚úÖ UTILIDADES DE FECHA Y FORMATO
    const formatearFecha = (fecha) => {
      const dateString = fecha?.date || fecha;
      const momentDate = moment(dateString);

      if (!momentDate.isValid()) {
        console.error("Fecha inv√°lida:", fecha);
        return { hora: "--:--", completa: "Fecha inv√°lida" };
      }

      const ahora = moment();
      let hora;

      if (momentDate.isSame(ahora, "day")) {
        hora = momentDate.format("HH:mm");
      } else if (momentDate.isSame(moment().subtract(1, "day"), "day")) {
        hora = `Ayer ${momentDate.format("HH:mm")}`;
      } else if (momentDate.isSame(ahora, "week")) {
        const dia = momentDate.format("dddd").charAt(0).toUpperCase() + momentDate.format("dddd").slice(1);
        hora = `${dia} ${momentDate.format("HH:mm")}`;
      } else if (momentDate.isSame(ahora, "year")) {
        hora = `${momentDate.format("DD/MM")} ${momentDate.format("HH:mm")}`;
      } else {
        hora = `${momentDate.format("DD/MM/YY")} ${momentDate.format("HH:mm")}`;
      }

      return {
        hora,
        completa: momentDate.format("DD/MM/YYYY HH:mm"),
        timestamp: momentDate.valueOf(),
      };
    };

    const crearFooterTiempo = (fecha) => {
      const tiempoFormateado = formatearFecha(fecha);
      return `<span style="font-size: 11px; color: #999; opacity: 0.7; font-weight: 400;">${tiempoFormateado.hora}</span>`;
    };

    const getEstadoIcono = (id_estado) => {
      const iconos = {
        1: ` <span style="font-size:12px;color:gray;">üïì</span>`,
        2: ` <span style="font-size:12px;color:gray;">‚úî</span>`,
        3: ` <span style="font-size:12px;color:rgba(139,69,19,0.6);">‚úî‚úî</span>`,
        4: ` <span style="font-size:12px;color:#2196f3;">‚úî‚úî</span>`,
      };
      return iconos[id_estado] || "";
    };

    // ‚úÖ GESTI√ìN DE ELEMENTOS DOM
    const getElementosDom = () => ({
      btnFinalizar: document.getElementById("btn-finalizar"),
      messagebarContainer: document.getElementById("messagebar-container"),
      mensajeFinalizada: document.getElementById("mensaje-finalizada"),
      messagesContent: document.getElementById("messages-content"),
    });

    const actualizarEstadoEnUI = (index, id_estado) => {
      const messageEls = $el.value[0].querySelectorAll(".message");
      const messageEl = messageEls[index];
      
      if (messageEl) {
        const textEl = messageEl.querySelector(".message-text");
        if (textEl) {
          const textoOriginal = textEl.innerText.replace(/‚úî.*/, "").trim();
          textEl.innerHTML = textoOriginal + getEstadoIcono(id_estado);
        }
      }
    };

    const actualizarUISegunEstado = () => {
      const elementos = getElementosDom();

      if (conversacionFinalizada) {
        elementos.btnFinalizar?.style.setProperty("display", "none");
        elementos.messagebarContainer?.style.setProperty("display", "none");
        elementos.mensajeFinalizada?.style.setProperty("display", "block");
        elementos.messagesContent?.style.setProperty("paddingBottom", "0px");
      } else {
        elementos.btnFinalizar?.style.setProperty("display", "block");
        elementos.messagebarContainer?.style.setProperty("display", "block");
        elementos.mensajeFinalizada?.style.setProperty("display", "none");
        elementos.messagesContent?.style.setProperty("paddingBottom", "44px");
      }
    };

    // ‚úÖ GESTI√ìN DE CONVERSACI√ìN
    const handleFinalizarConversacion = () => {
      $f7.dialog.confirm(
        "¬øEst√°s seguro de que deseas finalizar esta conversaci√≥n?",
        "Finalizar Conversaci√≥n",
        async () => {
          try {
            $f7.preloader.show();
            const usuarioId = Number(localStorage.getItem("usuarioId"));
            const response = await finalizarConversacion(conversacionId, usuarioId);

            if (response.success) {
              $f7.toast.create({
                text: "Conversaci√≥n finalizada exitosamente",
                closeTimeout: 1000,
                position: "top",
              }).open();

              if (window.cargarDatos) window.cargarDatos();

              setTimeout(() => {
                window.location.reload();
              }, 1000);
            } else {
              throw new Error(response.message || "Error al finalizar conversaci√≥n");
            }
          } catch (error) {
            $f7.dialog.alert("No se pudo finalizar la conversaci√≥n. Intenta nuevamente.");
          } finally {
            $f7.preloader.hide();
          }
        }
      );
    };

    const loadConversacionData = async () => {
      try {
        const conversaciones = await getConversaciones();
        conversacionData = conversaciones.find(conv => conv.conversacionId == conversacionId);

        if (conversacionData) {
          telefono = conversacionData.telefono || "Sin tel√©fono";
          conversacionFinalizada = conversacionData.estadoId === 4;

          console.log(`üìä Estado de conversaci√≥n ${conversacionId}: ${conversacionData.estadoId} (Finalizada: ${conversacionFinalizada})`);

          const navbarTitle = document.querySelector(".navbar .title");
          if (navbarTitle) {
            navbarTitle.textContent = telefono + (conversacionFinalizada ? " (Finalizada)" : "");
          }

          actualizarUISegunEstado();
        } else {
          console.warn(`‚ö†Ô∏è No se encontraron datos para conversaci√≥n ${conversacionId}`);
        }
      } catch (error) {
        console.error("‚ùå Error al cargar datos de conversaci√≥n:", error);
      }
    };

    const handleHistorialFinalizada = () => {
      console.log(`üìú Navegando al historial de conversaci√≥n: ${conversacionId}`);
      $f7.views.main.router.navigate(`/historial-finalizado/${conversacionId}/`);
    };

    // ‚úÖ GESTI√ìN DE MENSAJES
    const renderMessages = () => {
      if (!messages || !mensajesData.length) return;
      
      messages.removeMessages();

      const mensajesOrdenados = [...mensajesData].sort(
        (a, b) => new Date(a.created_at || 0) - new Date(b.created_at || 0)
      );

      const messagesToAdd = mensajesOrdenados.map((msg, index) => {
        const esEnviado = msg.contesta !== "cliente";
        const resendButton = msg.id_estado === 0 
          ? `<button class='button button-fill color-orange resend-button' data-index='${index}'>Reenviar</button>`
          : "";

        return {
          text: esEnviado 
            ? msg.mensaje + getEstadoIcono(msg.id_estado) + resendButton
            : msg.mensaje,
          type: esEnviado ? "sent" : "received",
          name: msg.contesta === "cliente" ? "Cliente" : "Yo",
          isHtml: true,
          footer: crearFooterTiempo(msg.created_at),
        };
      });

      messages.addMessages(messagesToAdd);

      // Configurar eventos de reenv√≠o
      document.querySelectorAll(".resend-button").forEach(button => {
        button.addEventListener("click", (e) => {
          const index = e.target.getAttribute("data-index");
          handleResendMessage(index);
        });
      });

      console.log(`üé® Renderizados ${messagesToAdd.length} mensajes`);
    };

    const handleResendMessage = async (index) => {
      const msg = mensajesData[index];
      
      if (!msg || msg.id_estado !== 0) {
        $f7.dialog.alert('Este mensaje ya no se puede reenviar');
        return;
      }

      const ahora = moment();
      const tiempoMensaje = moment(msg.created_at);
      const diferencia = ahora.diff(tiempoMensaje, 'seconds');
      
      if (diferencia < 5) {
        $f7.dialog.alert('Espera un momento antes de reenviar');
        return;
      }

      try {
        console.log(`üîÑ Reintentando enviar mensaje con ID ${msg.id}`);
        
        $f7.preloader.show();
        
        const botonReenviar = document.querySelector(`[data-index="${index}"]`);
        if (botonReenviar) {
          botonReenviar.disabled = true;
          botonReenviar.textContent = 'Enviando...';
        }
        
        await reenviarMensaje(msg.id);
        
        mensajesData[index].id_estado = 1;
        actualizarEstadoEnUI(index, 1);
        
        $f7.toast.create({
          text: 'Mensaje reenviado correctamente',
          position: 'top',
          closeTimeout: 2000
        }).open();
        
      } catch (error) {
        console.error(`‚ùå Error al reenviar mensaje:`, error);
        
        const errorMessage = error.response?.data?.error || 
                            error.response?.data?.message || 
                            'No se pudo reenviar el mensaje';
        
        $f7.dialog.alert(`Error: ${errorMessage}`);
        
        const botonReenviar = document.querySelector(`[data-index="${index}"]`);
        if (botonReenviar) {
          botonReenviar.disabled = false;
          botonReenviar.textContent = 'Reenviar';
        }
      } finally {
        $f7.preloader.hide();
      }
    };

    const loadMessages = async () => {
      try {
        mensajesData = (await getMensajesPorConversacion(conversacionId)) || [];
        console.log(`üìã Cargados ${mensajesData.length} mensajes`);
        
        renderMessages();

        const mensajesNoLeidos = mensajesData.filter(msg => msg.id_estado === 3);
        if (mensajesNoLeidos.length > 0) {
          await Promise.all(mensajesNoLeidos.map(msg => mensajeLeido(msg.id)));
          setTimeout(() => {
            if (window.cargarDatos) window.cargarDatos();
          }, 200);
        }
      } catch (error) {
        console.error("‚ùå Error al cargar mensajes:", error);
        $f7.dialog.alert("Error al cargar los mensajes");
      }
    };

    const sendMessage = async (messageText) => {
      if (!messageText?.trim() || !conversacionId || enviandoMensaje) {
        return;
      }

      enviandoMensaje = true;
      console.log("üì§ Enviando:", messageText);

      const tiempoActual = moment().toISOString();

      messages.addMessage({
        text: messageText,
        type: "sent",
        name: "Yo",
        footer: crearFooterTiempo(tiempoActual),
      });

      mensajesData.push({
        id: null,
        mensaje: messageText,
        contesta: "usuario",
        id_estado: 1,
        created_at: tiempoActual,
      });

      try {
        const payload = {
          id_conversacion: conversacionId,
          mensaje: messageText,
          contesta: "usuario",
          id_mensaje_whatsapp: null,
          id_mensaje_responde: null,
          id_estado: 1,
        };
        
        await enviarMensaje(payload);
        
        setTimeout(() => {
          enviandoMensaje = false;
        }, 2000);
        
        console.log("‚úÖ Mensaje enviado correctamente");
      } catch (error) {
        $f7.dialog.alert("No se pudo enviar el mensaje");
        messages.removeMessage(messages.messages[messages.messages.length - 1]);
        mensajesData.pop();
        enviandoMensaje = false;
        console.error("‚ùå Error al enviar mensaje:", error);
      }
    };

    // ‚úÖ EVENTOS DE INTERFAZ
    const getTextareaActivo = () => {
      const allTextareas = Array.from(document.querySelectorAll(".chat-message-input"))
        .filter(ta => ta.offsetParent !== null && !ta.disabled && !ta.readOnly);
      
      return allTextareas.find(ta => document.activeElement === ta) || 
             allTextareas[allTextareas.length - 1];
    };

    const handleSendClick = () => {
      const textarea = getTextareaActivo();
      if (!textarea) return;

      const messageText = textarea.value.trim();
      if (!messageText) return;

      sendMessage(messageText);
      textarea.value = "";
      textarea.focus();
    };

    const handleKeyPress = (e) => {
      if (e.key === "Enter" && !e.shiftKey) {
        e.preventDefault();
        handleSendClick();
      }
    };

    // ‚úÖ MODAL DE PLANTILLAS
    const handleShowModal = () => {
      if (navigator.vibrate) navigator.vibrate(50);
      
      const iconEl = document.querySelector('[title="Mensajes R√°pidos"] i');
      if (iconEl) {
        iconEl.style.transform = 'scale(1.2)';
        setTimeout(() => iconEl.style.transform = 'scale(1)', 150);
      }
      
      mostrarModalSimple($f7, (mensaje) => {
        const currentPage = $el.value[0];
        
        if (!currentPage.classList.contains('page-current')) {
          const activePage = document.querySelector('.page-current');
          if (activePage) {
            const activeTextarea = activePage.querySelector('.chat-message-input');
            if (activeTextarea && !activeTextarea.disabled && !activeTextarea.readOnly) {
              activeTextarea.value = mensaje;
              activeTextarea.focus();
              console.log("‚úÖ Plantilla insertada en p√°gina activa");
              return;
            }
          }
        }
        
        const textarea = currentPage.querySelector('.chat-message-input');
        if (textarea && textarea.offsetParent !== null && !textarea.disabled && !textarea.readOnly) {
          textarea.value = mensaje;
          textarea.focus();
          console.log("‚úÖ Plantilla insertada en textarea de p√°gina actual");
        } else {
          const pageActual = document.querySelector('.page-current .chat-message-input');
          if (pageActual && !pageActual.disabled && !pageActual.readOnly) {
            pageActual.value = mensaje;
            pageActual.focus();
            console.log("‚úÖ Plantilla insertada usando .page-current");
          }
        }
      });
    };

    // ‚úÖ SOCKET CONNECTION
    const conectarSocket = () => {
      socket = io("https://socket-5b6n.onrender.com");
      window.socket = socket;

      socket.on("nuevo_mensaje", async (data) => {
        console.log("üì® Mensaje recibido:", data);

        if (data.id_conversacion != conversacionId || 
           (data.contesta === "usuario" && enviandoMensaje)) return;

        if (["cliente", "bot"].includes(data.contesta)) {
          const nuevoMensaje = {
            mensaje: data.mensaje || data.texto,
            contesta: data.contesta,
            created_at: data.created_at || moment().toISOString(),
            id: data.id,
            id_estado: data.id_estado,
          };
          
          mensajesData.push(nuevoMensaje);
          const footerTiempo = crearFooterTiempo(nuevoMensaje.created_at);

          if (data.contesta === "cliente") {
            messages.addMessage({
              text: nuevoMensaje.mensaje,
              type: "received",
              name: "Cliente",
              footer: footerTiempo,
            });

            if (data.id) {
              try {
                await mensajeLeido(data.id);
                setTimeout(() => {
                  if (window.cargarDatos) window.cargarDatos();
                }, 200);
              } catch (error) {
                console.error("‚ùå Error al marcar mensaje como le√≠do:", error);
              }
            }

            $f7.toast.create({
              text: "Nuevo mensaje del cliente",
              closeTimeout: 2000,
              position: "top",
            }).open();
          } else if (data.contesta === "bot") {
            messages.addMessage({
              text: nuevoMensaje.mensaje + getEstadoIcono(data.id_estado),
              type: "sent",
              name: "Bot",
              isHtml: true,
              footer: footerTiempo,
            });
          }
        }
      });

      socket.on("mensaje_actualizado", (data) => {
        console.log("üì¶ Estado actualizado:", data);
        let idx = mensajesData.findIndex(msg => msg.id === data.id);

        if (idx >= 0) {
          mensajesData[idx].id_estado = data.id_estado;
        } else {
          idx = mensajesData.findIndex(msg => msg.id === null);
          if (idx >= 0) {
            mensajesData.splice(idx, 1);
            mensajesData.push({
              id: data.id,
              mensaje: data.mensaje,
              contesta: data.contesta,
              created_at: data.created_at || moment().toISOString(),
              id_estado: data.id_estado,
            });
          }
        }

        if (idx >= 0) actualizarEstadoEnUI(idx, data.id_estado);
      });
    };

    // ‚úÖ CONFIGURACI√ìN DE EVENTOS DEL MESSAGEBAR
    const configurarEventosMessagebar = () => {
      setTimeout(() => {
        const messagebarEl = $el.value[0].querySelector(".messagebar");
        if (!messagebarEl) return;

        const textarea = messagebarEl.querySelector(".chat-message-input");
        const sendBtn = messagebarEl.querySelector(".link.icon-only");

        if (textarea) {
          if (conversacionFinalizada) {
            textarea.disabled = true;
            textarea.readOnly = true;
          } else {
            textarea.disabled = false;
            textarea.readOnly = false;
            textarea.focus();
          }
          
          textarea.removeEventListener("keypress", handleKeyPress);
          textarea.addEventListener("keypress", handleKeyPress);
        }

        if (sendBtn) {
          if (conversacionFinalizada) {
            sendBtn.style.pointerEvents = "none";
            sendBtn.style.opacity = "0.5";
          } else {
            sendBtn.style.pointerEvents = "";
            sendBtn.style.opacity = "";
          }
          
          sendBtn.removeEventListener("click", handleSendClick);
          sendBtn.addEventListener("click", handleSendClick);
        }
      }, 100);
    };

    // ‚úÖ LIMPIEZA DE RECURSOS
    const limpiarRecursos = () => {
      enviandoMensaje = false;
      
      const messagebarEl = $el.value[0]?.querySelector(".messagebar");
      if (messagebarEl) {
        const textarea = messagebarEl.querySelector(".chat-message-input");
        const sendBtn = messagebarEl.querySelector(".link.icon-only");
        
        if (textarea) textarea.removeEventListener("keypress", handleKeyPress);
        if (sendBtn) sendBtn.removeEventListener("click", handleSendClick);
      }

      if (messagebar && typeof messagebar.destroy === 'function') {
        messagebar.destroy();
        messagebar = null;
      }
      
      if (messages && typeof messages.destroy === 'function') {
        messages.destroy();
        messages = null;
      }
      
      if (socket) {
        socket.disconnect();
        socket = null;
      }
      
      mensajesData = [];
    };

    // ‚úÖ CICLO DE VIDA
    $on("pageInit", async (page) => {
      console.log("üîÑ pageInit ejecutado");
      
      limpiarRecursos();

      conversacionId = page.route?.params?.conversacionId || 
                     $f7.views.main.router.currentRoute?.params?.conversacionId;

      if (!conversacionId) {
        $f7.dialog.alert("No se pudo obtener el ID de conversaci√≥n");
        return;
      }

      console.log("üîÑ Nuevo conversacionId:", conversacionId);

      messagebar = $f7.messagebar.create({ el: $el.value.find(".messagebar") });
      messages = $f7.messages.create({ el: $el.value.find(".messages") });
      messages.removeMessages();

      configurarEventosMessagebar();

      await loadConversacionData();
      conectarSocket();
      await loadMessages();

      // ‚úÖ INICIALIZAR ZADARMA
      console.log("üöÄ INICIALIZACI√ìN ZADARMA");
      
      setTimeout(async () => {
        if (!window.zadarmaWidgetFn) {
          console.log("üì¶ Cargando scripts de Zadarma...");
          try {
            await cargarScriptsZadarma();
          } catch (error) {
            console.error("‚ùå Error cargando scripts:", error);
          }
        }
        
        if (window.zadarmaWidgetFn) {
          try {
            console.log("üöÄ Ejecutando zadarmaWidgetFn...");
            
            window.zadarmaWidgetFn(
              '74f6a50ca3cb609de24eac1af3eee1f48e7aa6b9df983786525da39d8155ea3067b649dccf9900bc4c0ce1ef4dc91a3960b743e96c70bc5b01b4a7241640af39',
              '517653-100',
              'square',
              'es',
              true,
              { right: '10px', bottom: '5px' }
            );
            
            console.log("‚úÖ zadarmaWidgetFn ejecutado");
            
            setTimeout(() => {
              if (window.zadarmaWidget) {
                console.log("üéâ ZADARMA WIDGET LISTO!");
                console.log("  - M√©todos:", Object.keys(window.zadarmaWidget));
                zadarmaReady = true;
                
                // Ocultar widget por defecto
                const widgets = document.querySelectorAll('[id*="zadarma"], [class*="zadarma"]');
                widgets.forEach(w => {
                  w.style.cssText = `
                    position: fixed !important;
                    top: -9999px !important;
                    left: -9999px !important;
                    opacity: 0 !important;
                    pointer-events: none !important;
                    z-index: -9999 !important;
                    visibility: hidden !important;
                  `;
                });
              }
            }, 3000);
            
          } catch (error) {
            console.error("‚ùå Error inicializando widget:", error);
          }
        }
      }, 2000);
    });

    $on("pageBeforeRemove", limpiarRecursos);

    return $render;
  };
</script>

<style>
@keyframes phone-pulse {
  0% { transform: scale(1); }
  50% { transform: scale(1.1); }
  100% { transform: scale(1); }
}

@keyframes phone-ring {
  0% { transform: rotate(0deg); }
  25% { transform: rotate(-10deg); }
  75% { transform: rotate(10deg); }
  100% { transform: rotate(0deg); }
}

.phone-pulse {
  animation: phone-pulse 1s infinite;
}

.phone-ring {
  animation: phone-ring 0.5s infinite;
}

#phone-icon {
  transition: color 0.3s ease, transform 0.2s ease;
}

/* Ocultar widgets de Zadarma por defecto */
[id*="zadarma"], 
[class*="zadarma"], 
iframe[src*="zadarma"] {
  position: fixed !important;
  top: -9999px !important;
  left: -9999px !important;
  opacity: 0 !important;
  pointer-events: none !important;
  z-index: -9999 !important;
  visibility: hidden !important;
}
</style>
<template>
  <div class="page">
    <div class="navbar">
      <div class="navbar-bg"></div>
      <div class="navbar-inner sliding">
        <div class="left">
          <a href="#" class="link back">
            <i class="icon icon-back"></i>
            <span class="if-not-md">Volver</span>
          </a>
        </div>
        <div class="title">${telefono}</div>
      </div>
    </div>

    <div class="toolbar messagebar">
      <div class="toolbar-inner">
        <div class="messagebar-area">
          <textarea
            class="resizable"
            placeholder="Escribe un mensaje..."
          ></textarea>
        </div>
        <a
          class="link icon-only demo-send-message-link"
          @click="${sendMessage}"
        >
          <i class="icon f7-icons">arrow_up_circle_fill</i>
        </a>
      </div>
    </div>

    <div class="page-content messages-content">
      <div class="messages">
        <!-- Los mensajes se cargarán aquí -->
      </div>
    </div>
  </div>
</template>

<script>
  import api from "../js/api.js";

  export default (props, { $f7, $el, $on }) => {
    let messagebar;
    let messages;
    let conversacionId;
    let telefono = "Chat";
    let mensajesData = [];

    const loadMessages = async () => {
      try {
        const response = await api.get(
          `/mensaje/listar-por-conversacion/${conversacionId}`
        );
        mensajesData = response.data.data;

        const clienteResponse = await api.get("/cliente/listado");
        const conversacionResponse = await api.get("/conversacion/listado");

        const conversacion = conversacionResponse.data.data.find(
          (conv) => conv.id == conversacionId
        );
        if (conversacion) {
          const cliente = clienteResponse.data.data.find(
            (cli) => cli.id === conversacion.id_cliente
          );
          if (cliente && cliente.telefono) {
            telefono = cliente.telefono;
            const titleEl = document.querySelector(".navbar .title");
            if (titleEl) titleEl.textContent = telefono;
          }
        }

        renderMessages();
      } catch (error) {
        console.error("Error al cargar mensajes:", error);
        $f7.dialog.alert("Error al cargar los mensajes");
      }
    };

    const renderMessages = () => {
      if (!messages || !mensajesData.length) return;

      messages.removeMessages();

      const messagesToAdd = mensajesData.map((msg) => {
        const isReceived = msg.contesta === "cliente";

        return {
          text: msg.mensaje,
          type: isReceived ? "received" : "sent",
          name: isReceived ? "Cliente" : "Bot",
          avatar: isReceived
            ? "https://cdn.framework7.io/placeholder/people-100x100-9.jpg"
            : null,
        };
      });

      messages.addMessages(messagesToAdd);
    };

    const sendMessage = () => {
      const text = messagebar.getValue().trim();
      if (!text) return;

      // Agregar mensaje al chat
      messages.addMessage({
        text: text,
        type: "sent",
        name: "Yo",
      });

      // Limpiar el campo
      messagebar.clear();
      messagebar.focus();
    };

    $on("pageInit", (page) => {
      // Usar la API de Framework7 para obtener parámetros
      conversacionId =
        page.route?.params?.conversacionId ||
        $f7.views.main.router.currentRoute?.params?.conversacionId;

      console.log("Conversación ID:", conversacionId);

      if (!conversacionId) {
        $f7.dialog.alert("No se pudo obtener el ID de conversación");
        return;
      }

      messagebar = $f7.messagebar.create({
        el: $el.value.find(".messagebar"),
      });

      messages = $f7.messages.create({
        el: $el.value.find(".messages"),
      });

      loadMessages();
    });

    $on("pageBeforeRemove", () => {
      if (messagebar) messagebar.destroy();
      if (messages) messages.destroy();
    });

    return $render;
  };
</script>

<template>
  <div class="page">
    <div class="navbar">
      <div class="navbar-bg"></div>
      <div class="navbar-inner sliding">
        <div class="left">
          <a href="#" class="link" @click="${() => $f7.views.main.router.navigate('/')}">
            <i class="icon icon-back"></i>
            <span class="if-not-md">Volver</span>
          </a>
        </div>
        <div class="title">${telefono}</div>
        <div class="right">
          <a href="#" class="link icon-only panel-open" data-panel="right">
            <i class="icon f7-icons if-not-md">menu</i>
            <i class="icon material-icons if-md">menu</i>
          </a>
        </div>
      </div>
    </div>

    <!-- ✅ Messagebar simplificado -->
    <div class="toolbar messagebar">
      <div class="toolbar-inner">
        <div class="messagebar-area">
          <textarea id="message-input" class="resizable" placeholder="Escribe un mensaje..."></textarea>
        </div>
        <!-- ✅ Botón con evento directo -->
        <a class="link icon-only" @click="${handleSendClick}">
          <i class="icon f7-icons">arrow_up_circle_fill</i>
        </a>
      </div>
    </div>

    <div class="page-content messages-content">
      <div class="messages"></div>
    </div>
  </div>
</template>




<script>
  import api from "../js/api.js";
  import io from "socket.io-client";
  import { getMensajesPorConversacion, enviarMensaje } from "../js/services/index.js";

  export default (props, { $f7, $el, $on }) => {
    let messagebar,
      messages,
      conversacionId,
      telefono = "Chat";
    let mensajesData = [],
      socket = null;
    let enviandoMensaje = false; // ✅ Flag para evitar duplicados

    const conectarSocket = () => {
      socket = io("http://82.180.163.151:3000/");

      socket.on("nuevo_mensaje", (data) => {
        console.log("📨 Mensaje recibido por socket:", data);

        if (data.id_conversacion != conversacionId) {
          console.log("❌ Mensaje de otra conversación, ignorando");
          return;
        }

        // ✅ FILTRAR mensajes enviados por nosotros mismos
        if (data.contesta === "usuario" && enviandoMensaje) {
          console.log(
            "⚠️ Mensaje propio detectado via socket, ignorando duplicado"
          );
          return;
        }

        // ✅ Solo procesar mensajes del cliente
        if (data.contesta === "cliente" || data.contesta === "bot") {
          const nuevoMensaje = {
            mensaje: data.mensaje || data.texto,
            contesta: data.contesta,
            created_at: data.created_at || new Date().toISOString(),
          };

          mensajesData.push(nuevoMensaje);

          messages.addMessage({
            text: nuevoMensaje.mensaje,
            type: data.contesta === "bot" ? "sent" : "received",
            name: data.contesta === "bot" ? "Bot" : "Cliente",
          });

          console.log(
            `✅ Mensaje del ${data.contesta === "bot" ? "BOT" : "CLIENTE"} agregado`
          );

          if (data.contesta === "cliente") {
            $f7.toast
              .create({
                text: "Nuevo mensaje del cliente",
                closeTimeout: 2000,
                position: "top",
              })
              .open();
          }
        } else {
          console.log("⚠️ Mensaje propio ignorado (contesta: usuario)");
        }
      });

      socket.on("mensaje_actualizado", (data) => {
        console.log("📦 Estado de mensaje actualizado:", data);

        const mensajeIndex = mensajesData.findIndex(
          (msg) => msg.id === data.id
        );

        if (mensajeIndex !== -1) {
          mensajesData[mensajeIndex].id_estado = data.id_estado;
          console.log("✅ Estado actualizado localmente");

          actualizarEstadoEnUI(data.id, data.id_estado);

        } else {
          console.log("❌ No se encontró el mensaje localmente");
        }
      });
    };

    const actualizarEstadoEnUI = (id, id_estado) => {
      const messageEls = $el.value.querySelectorAll('.message');
      messageEls.forEach((el) => {
        const mensajeId = el.dataset.messageId; // <-- Framework7 guarda el id como data-message-id
        if (mensajeId == id) {
          const textEl = el.querySelector('.message-text');
          if (textEl) {
            // Extraemos el texto original quitando cualquier estado previo
            const textoOriginal = textEl.innerText.replace(/✔.*/, "").trim();
            textEl.innerHTML = textoOriginal + getEstadoIcono(id_estado);
          }
        }
      });
    }

    const getEstadoIcono = (id_estado) => {
      if (id_estado === 1) {
        return ` <span style="font-size: 12px; color: gray;">🕓</span>`;
      } else if (id_estado === 2) {
        return ` <span style="font-size: 12px; color: gray;">✔</span>`;
      } else if (id_estado === 3) {
        return ` <span style="font-size: 12px; color: rgba(139,69,19,0.6);">✔✔</span>`;
      } else if (id_estado === 4) {
        return ` <span style="font-size: 12px; color: #2196f3;">✔✔</span>`;
      } else {
        return "";
      }
    };



    const loadMessages = async () => {
      try {
        mensajesData = await getMensajesPorConversacion(conversacionId) || [];
        console.log(`📋 Cargando ${mensajesData.length} mensajes históricos`);
        renderMessages();
      } catch (error) {
        console.error("❌ Error al cargar mensajes:", error);
        $f7.dialog.alert("Error al cargar los mensajes");
      }
    };

    const renderMessages = () => {
      if (!messages || !mensajesData.length) {
        console.log("📭 No hay mensajes para mostrar");
        return;
      }

      messages.removeMessages();

      const mensajesOrdenados = [...mensajesData].sort(
        (a, b) => new Date(a.created_at || 0) - new Date(b.created_at || 0)
      );

      const messagesToAdd = mensajesOrdenados.map((msg) => {
        const isReceived = msg.contesta === "cliente";
        return {
          text: msg.mensaje + getEstadoIcono(msg.id_estado),
          type: isReceived ? "received" : "sent",
          name: isReceived ? "Cliente" : "Yo",
          isHtml: true,
        };
      });
      console.log(' hola ${messagesToAdd.map(m => m.text)');

      messages.addMessages(messagesToAdd);
      console.log(`🎨 Renderizados ${messagesToAdd.length} mensajes`);
    };

    const sendMessage = async (messageText) => {
      if (!messageText || !messageText.trim()) {
        console.log("⚠️ Mensaje vacío, no enviando");
        return;
      }

      // ✅ Activar flag para evitar duplicados
      enviandoMensaje = true;

      console.log("📤 ENVIANDO mensaje del usuario:", messageText);

      // Agregar mensaje localmente INMEDIATAMENTE
      messages.addMessage({
        text: messageText,
        type: "sent",
        name: "Yo",
      });

      const mensajeLocal = {
        mensaje: messageText,
        contesta: "usuario",
        created_at: new Date().toISOString(),
        id_estado: 1, // Estado inicial
      };

      mensajesData.push(mensajeLocal);
      console.log("✅ Mensaje agregado localmente");

      try {
        const payload = {
          id_conversacion: conversacionId,
          mensaje: messageText,
          contesta: "usuario",
          id_mensaje_whatsapp: null,
          id_mensaje_responde: null,
          id_estado: 1,
          created_at: new Date().toISOString(),
        };
        console.log("🚀 Enviando al servidor:", payload);
        const response = await enviarMensaje(payload); // <--- CORREGIDO
        console.log("✅ Respuesta del servidor:", response); // <--- CORREGIDO
        console.log("📨 Mensaje enviado exitosamente por WhatsApp");

        setTimeout(() => {
          enviandoMensaje = false;
          console.log("🔓 Flag de envío desactivado");
        }, 2000);
      } catch (error) {
        console.error("❌ Error al enviar mensaje:", error);
        console.error(
          "❌ Detalles del error:",
          error.response?.data || error.message
        );

        $f7.dialog.alert("No se pudo enviar el mensaje");

        // ✅ Remover mensaje local si falla
        const lastMessage = messages.messages[messages.messages.length - 1];
        if (lastMessage && lastMessage.text === messageText) {
          messages.removeMessage(lastMessage);
          console.log("🗑️ Mensaje visual removido por error");
        }

        const index = mensajesData.findIndex(
          (msg) => msg.mensaje === messageText && msg.contesta === "usuario"
        );
        if (index !== -1) {
          mensajesData.splice(index, 1);
          console.log("🗑️ Mensaje de datos removido por error");
        }

        // ✅ Desactivar flag en caso de error
        enviandoMensaje = false;
      }
    };

    const handleSendClick = () => {
      console.log("🖱️ Botón de envío clickeado");

      const textarea = document.getElementById("message-input");
      if (!textarea) {
        console.error("❌ No se encontró el textarea");
        return;
      }

      const messageText = textarea.value.trim();
      console.log("📝 Texto del mensaje:", messageText);

      if (!messageText) {
        console.log("⚠️ El textarea está vacío");
        return;
      }

      // Enviar mensaje
      sendMessage(messageText);

      // Limpiar textarea
      textarea.value = "";
      textarea.focus();
    };

    const handleKeyPress = (e) => {
      if (e.key === "Enter" && !e.shiftKey) {
        e.preventDefault();
        handleSendClick();
      }
    };

    $on("pageInit", (page) => {
      conversacionId =
        page.route?.params?.conversacionId ||
        $f7.views.main.router.currentRoute?.params?.conversacionId;

      if (!conversacionId) {
        $f7.dialog.alert("No se pudo obtener el ID de conversación");
        return;
      }

      console.log(`🚀 Iniciando chat para conversación: ${conversacionId}`);

      messagebar = $f7.messagebar.create({
        el: $el.value.find(".messagebar"),
      });

      messages = $f7.messages.create({
        el: $el.value.find(".messages"),
      });

      setTimeout(() => {
        const textarea = document.getElementById("message-input");
        if (textarea) {
          textarea.addEventListener("keypress", handleKeyPress);
          console.log("✅ Event listener agregado al textarea");
        }
      }, 100);

      conectarSocket();
      setTimeout(loadMessages, 100);
    });

    $on("pageBeforeRemove", () => {
      console.log("🧹 Cerrando chat...");

      // ✅ Limpiar flags
      enviandoMensaje = false;

      const textarea = document.getElementById("message-input");
      if (textarea) {
        textarea.removeEventListener("keypress", handleKeyPress);
      }

      if (messagebar) {
        messagebar.destroy();
        messagebar = null;
      }
      if (messages) {
        messages.destroy();
        messages = null;
      }
      if (socket) {
        socket.disconnect();
        socket = null;
      }

      mensajesData = [];
    });

    return $render;
  };
</script>
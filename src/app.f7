<template>
  <div id="app">
    <!-- Panel izquierdo: Lista de conversaciones -->
    <div
      class="panel panel-left panel-cover dark panel-init"
      data-visible-breakpoint="960"
    >
      <div class="view view-init" data-name="left">
        <div class="page" data-name="home">
          <div class="navbar navbar-large">
            <div class="navbar-bg"></div>
            <div class="navbar-inner sliding">
              <div class="title">MyApp</div>
              <div class="title-large">
                <div class="title-large-text">Conversaciones</div>
              </div>
              <div
                class="subnavbar"
                style="
                  display: flex;
                  justify-content: flex-end;
                  padding: 0 10px;
                "
              >
                <form
                  class="searchbar searchbar-init"
                  style="max-width: 300px; width: 100%"
                  onsubmit="return false;"
                >
                  <div class="searchbar-inner">
                    <div class="searchbar-input-wrap">
                      <input
                        id="search-input"
                        type="search"
                        placeholder="Buscar por telÃ©fono"
                        autocomplete="off"
                      />
                      <i class="searchbar-icon"></i>
                      <span class="input-clear-button" id="clear-button"></span>
                    </div>
                    <span class="searchbar-disable-button">Cancel</span>
                  </div>
                </form>
              </div>
            </div>
          </div>
          <div class="page-content">
            <div class="list">
              <ul id="lista-conversaciones">
                <!-- Las conversaciones se renderizan aquÃ­ -->
              </ul>
            </div>
          </div>
        </div>
      </div>
    </div>

    <!-- Panel derecho: Datos del cliente -->
    <div class="panel panel-right panel-reveal dark panel-init">
      <div class="view">
        <div class="page">
          <div class="navbar">
            <div class="navbar-bg"></div>
            <div class="navbar-inner">
              <div class="title">Datos del Cliente</div>
            </div>
          </div>
          <div class="page-content">
            <div class="block" id="panel-datos-cliente">
              Selecciona una conversaciÃ³n para ver los datos del cliente.
            </div>
          </div>
        </div>
      </div>
    </div>

    <!-- Your main view, should have "view-main" class -->
    <div
      id="view-main"
      class="view view-main view-init safe-areas"
      data-url="/dashboard"
    >
      <!-- Top Navbar -->
      <div class="navbar">
        <div class="navbar-bg" style="background-color: #f8f9fa"></div>
        <div class="navbar-inner">
          <div class="left">
            <a href="/dashboard" class="link">
              <img
                src="icons/logo.png"
                class="logo"
                alt="Logo"
                style="height: 28px"
              />
            </a>
            <!-- BotÃ³n circular de menÃº -->
            <a href="/menu-modulos" class="link" style="margin-left: 15px">
              <div
                style="
                  width: 32px;
                  height: 32px;
                  background-color: #dc3545;
                  border-radius: 50%;
                  display: flex;
                  align-items: center;
                  justify-content: center;
                "
              >
                <i class="icon f7-icons" style="font-size: 16px; color: white"
                  >square_grid_3x2</i
                >
              </div>
            </a>
          </div>

          <div class="right">
            ${isSudo && $h`
            <a href="/sistema/configuraciones" class="link icon-only">
              <i class="icon f7-icons" style="color: #343a40">gear_alt</i>
            </a>
            `}
            <!-- Select de estado mejorado -->
            <div
              style="
                display: inline-flex;
                align-items: center;
                margin-right: 10px;
              "
            >
              <label
                for="estado-usuario"
                style="
                  margin-right: 6px;
                  font-size: 14px;
                  color: #343a40;
                  font-weight: 500;
                "
                >Estado:</label
              >
              <select
                id="estado-usuario"
                style="
                  border-radius: 5px;
                  padding: 2px 10px;
                  font-size: 14px;
                  background: #f1f3f4;
                  border: 1px solid #ced4da;
                  color: #343a40;
                  min-width: 90px;
                "
                title="Cambia tu estado de disponibilidad"
              >
                <option value="online">ðŸŸ¢ Online</option>
                <option value="ausente">ðŸŸ¡ Ausente</option>
              </select>
            </div>
            <a
              href="#"
              class="link popover-open"
              data-popover=".account-options"
              style="color: #343a40"
            >
              <span
                >Hola, ${perfil.value['nombres']}
                ${perfil.value['apellidos']}</span
              >
              <i class="icon f7-icons" style="color: #343a40"
                >person_crop_circle</i
              >
            </a>
          </div>
        </div>
      </div>
    </div>

    <!-- OPCIONES DEL USUARIO LOGEADO -->
    <div class="popover account-options">
      <!-- Popover's arrow -->
      <div class="popover-arrow"></div>

      <!-- Popover content -->
      <div class="popover-inner">
        <div class="list list-outline">
          <ul>
            <li>
              <a
                href="/usuario/perfil"
                class="item-link item-content popover-close"
              >
                <div class="item-media">
                  <i class="icon f7-icons">person_crop_circle</i>
                </div>
                <div class="item-inner">
                  <div class="item-title">
                    Perfil
                    <div class="item-footer">Ver/Editar perfil de usuario</div>
                  </div>
                </div>
              </a>
            </li>
            <li>
              <a
                href="/usuario/cambiar-contraseÃ±a"
                class="item-link item-content popover-close"
              >
                <div class="item-media">
                  <i class="icon f7-icons">lock_rotation</i>
                </div>
                <div class="item-inner">
                  <div class="item-title">Cambiar ContraseÃ±a</div>
                </div>
              </a>
            </li>
            <li>
              <a
                href="#"
                class="item-link item-content popover-close color-red"
                @click="${cerrarSesion}"
              >
                <div class="item-media">
                  <i class="icon f7-icons">square_arrow_left_fill</i>
                </div>
                <div class="item-inner">
                  <div class="item-title">Cerrar SesiÃ³n</div>
                </div>
              </a>
            </li>
          </ul>
        </div>
      </div>
    </div>

    <!-- LOGIN SCREEN -->
    <div id="login-screen" class="login-screen">
      <div class="view">
        <div class="page login-screen-page">
          <div class="page-content login-screen-content">
            <div class="login-screen-title">${app_name}</div>
            <form @submit="${iniciarSesion}" autocomplete="off">
              <div class="list">
                <ul>
                  <li class="item-content item-input">
                    <div class="item-inner">
                      <div class="item-title item-label">Usuario</div>
                      <div class="item-input-wrap">
                        <input
                          type="text"
                          name="username"
                          id="iusername"
                          placeholder="Usuario"
                          autocomplete="off"
                        />
                        <span class="input-clear-button"></span>
                      </div>
                    </div>
                  </li>
                  <li class="item-content item-input">
                    <div class="item-inner">
                      <div class="item-title item-label">ContraseÃ±a</div>
                      <div class="item-input-wrap">
                        <input
                          type="password"
                          name="password"
                          id="ipassword"
                          placeholder="ContraseÃ±a"
                        />
                        <span class="input-clear-button"></span>
                      </div>
                    </div>
                  </li>
                </ul>
              </div>
              <div class="list">
                <ul>
                  <li class="item-content px-3">
                    <button
                      type="submit"
                      class="button button-fill button-large color-green"
                    >
                      Ingresar
                    </button>
                  </li>
                </ul>
              </div>
            </form>
          </div>
        </div>
      </div>
    </div>
  </div>
</template>

<script>
  // --- Importaciones para el chat ---
  import {
    getClientes,
    getConversaciones,
    login, // âœ… Agregar funciÃ³n login
    logout, // âœ… Agregar funciÃ³n logout
    cambiarEstadoUsuario,
    getEstadoUsuario,
  } from "./js/services/index.js";
  import io from "socket.io-client";
  import { panelDerecho, panelIzquierdo } from "./js/components/index.js";

  export default (props, { $, $f7, $store, $update, $on }) => {
    let app_name = $f7.name;
    let cuenta = $store.getters.cuenta;
    let perfil = $store.getters.perfil;
    let isSudo = $store.getters.isSudo;

    // --- Variables de estado para el chat ---
    let conversaciones = [];
    let clientes = [];
    let perfiles = [];
    let socket = null;
    // Estado del usuario: se inicializa vacÃ­o, se obtiene del backend al iniciar
    let estadoUsuario = "online";

    // --- Funciones del chat ---

    // --- Handler para el select de estado ---
    const handleEstadoChange = async (ev) => {
      estadoUsuario = ev.target.value;
      try {
        await cambiarEstadoUsuario(estadoUsuario);
        $f7.toast
          .create({
            text: `Estado cambiado a: ${estadoUsuario}`,
            closeTimeout: 1500,
          })
          .open();
      } catch (error) {
        $f7.toast
          .create({
            text: "Error al cambiar el estado en el servidor",
            closeTimeout: 2500,
          })
          .open();
      }
    };

    // --- Obtener estado actual del usuario desde la BD al iniciar ---
    async function obtenerEstadoUsuario() {
      try {
        const id_usuario = localStorage.getItem("usuarioId");
        const data = await getEstadoUsuario(id_usuario);
        estadoUsuario = data.estado || "online";
      } catch (e) {
        estadoUsuario = "online";
      }
    }
    const cargarDatos = async () => {
      try {
        // Verificar si el usuario estÃ¡ autenticado antes de cargar
        const usuarioId = Number(localStorage.getItem("usuarioId"));
        const token = localStorage.getItem("token");

        if (!usuarioId || usuarioId === 0 || !token) {
          console.log("Usuario no autenticado, esperando login...");
          return;
        }

        console.log("Cargando conversaciones para usuario:", usuarioId);
        [conversaciones, clientes] = await Promise.all([
          getConversaciones(),
          getClientes(),
        ]);
        renderConversaciones(conversaciones);
        initSearch();
      } catch (err) {
        console.error("Error al cargar conversaciones:", err);
        $f7.toast
          .create({
            text: "Error al cargar conversaciones",
            closeTimeout: 3000,
          })
          .open();
      }
    };

    // Hacer la funciÃ³n disponible globalmente
    window.cargarDatos = cargarDatos;

    let conversacionSeleccionadaId = null;
    const handleSeleccionarConversacion = (convId) => {
      conversacionSeleccionadaId = convId;
      renderConversaciones(conversaciones);

      // Navegar a la pÃ¡gina de messages
      $f7.views.main.router.navigate(`/messages/${convId}/`);
    };

    const renderConversaciones = (convs) => {
      const usuarioId = Number(localStorage.getItem("usuarioId"));
      const convsFiltradas = convs.filter(
        (conv) => conv.usuarioId && conv.usuarioId == usuarioId
      );

      const lista = document.querySelector("#lista-conversaciones");
      if (!lista || !panelIzquierdo) return;

      panelIzquierdo({
        lista,
        conversaciones: convsFiltradas,
        clientes,
        perfiles,
        panelIzquierdo,
        panelDerecho,
        $f7,
        onSeleccionar: handleSeleccionarConversacion,
        conversacionSeleccionadaId,
      });
    };

    const initSearch = () => {
      const input = document.querySelector("#search-input");
      const clearBtn = document.querySelector("#clear-button");

      if (!input || !clearBtn) return;

      input.addEventListener("input", () => {
        const query = input.value.trim().toLowerCase();

        if (query === "") {
          renderConversaciones(conversaciones);
          return;
        }

        const usuarioId = Number(localStorage.getItem("usuarioId"));
        const filtradas = conversaciones.filter((conv) => {
          if (!conv.telefono) return false;
          const nombre = (conv.nombreCliente || "").toLowerCase();
          const apellido = (conv.apellidoCliente || "").toLowerCase();
          return (
            conv.usuarioId &&
            conv.usuarioId == usuarioId &&
            (conv.telefono.toLowerCase().includes(query) ||
              conv.conversacionId.toString().includes(query) ||
              nombre.includes(query) ||
              apellido.includes(query))
          );
        });

        renderConversaciones(filtradas);
      });

      clearBtn.addEventListener("click", () => {
        input.value = "";
        renderConversaciones(conversaciones);
        input.focus();
      });
    };

    // --- FunciÃ³n para cambiar contenido del panel segÃºn contexto ---
    window.switchPanelContent = (mode) => {
      const leftPanel = document.querySelector(".panel-left");
      if (!leftPanel) return;

      // Siempre cargar conversaciones, sin importar el modo
      cargarDatos();
    };

    // --- Ciclo de vida: Al iniciar la aplicaciÃ³n ---
    $on("pageInit", () => {
      console.log("Iniciando aplicaciÃ³n con funcionalidad de chat...");

      // ConexiÃ³n en tiempo real con el servidor
      // socket = io("https://vip2cars.pe:3000/");
      socket = io("https://socket-5b6n.onrender.com");

      socket.on("conversacion_asignada", (data) => {
        const usuarioId = Number(localStorage.getItem("usuarioId"));
        console.log("Evento conversacion_asignada recibido:", data);
        if (data.usuarioId && data.usuarioId == usuarioId) {
          cargarDatos();
          $f7.toast
            .create({
              text: "Nueva conversaciÃ³n recibida",
              closeTimeout: 2000,
              position: "top",
            })
            .open();
        }
      });

      socket.on("nuevo_mensaje", (data) => {
        console.log("Evento nuevo_mensaje recibido:", data);
        cargarDatos();
      });

      // FunciÃ³n para verificar usuario autenticado
      const verificarUsuarioAutenticado = () => {
        const usuarioId = Number(localStorage.getItem("usuarioId"));
        const token = localStorage.getItem("token");

        console.log(
          "Verificando autenticaciÃ³n - usuarioId:",
          usuarioId,
          "token:",
          !!token
        );

        if (usuarioId && usuarioId !== 0 && token) {
          console.log(
            "Usuario autenticado detectado, cargando conversaciones..."
          );
          cargarDatos();
          return true;
        }
        return false;
      };

      // Verificar inmediatamente
      verificarUsuarioAutenticado();

      // Listener para detectar cambios en localStorage (cuando se guarda el usuarioId)
      let ultimoUsuarioId = localStorage.getItem("usuarioId");
      const intervalCheck = setInterval(() => {
        const usuarioIdActual = localStorage.getItem("usuarioId");

        if (
          usuarioIdActual !== ultimoUsuarioId &&
          usuarioIdActual &&
          usuarioIdActual !== "0"
        ) {
          console.log("Nuevo usuarioId detectado:", usuarioIdActual);
          ultimoUsuarioId = usuarioIdActual;
          setTimeout(() => {
            cargarDatos();
          }, 500);
          clearInterval(intervalCheck);
        }
      }, 500);

      // Limpiar el intervalo despuÃ©s de 30 segundos
      setTimeout(() => {
        clearInterval(intervalCheck);
      }, 30000);

      // Al iniciar, obtener el estado real del usuario desde la BD
      obtenerEstadoUsuario().then(() => {
        const selectEstado = document.getElementById("estado-usuario");
        if (selectEstado) {
          // Forzar actualizaciÃ³n visual del select
          setTimeout(() => {
            selectEstado.value = estadoUsuario;
          }, 0);
          selectEstado.addEventListener("change", handleEstadoChange);
        }
      });
    });

    // --- Reemplazar la funciÃ³n iniciarSesion ---
    const iniciarSesion = async function (ev) {
      ev.preventDefault();
      let formData = $f7.form.convertToData(ev.target);

      $f7.dialog.preloader("Iniciando SesiÃ³n", "red");

      try {
        // âœ… Usar el servicio en lugar de fetch
        const data = await login(formData);

        $f7.dialog.close();

        if (data.status === 400) {
          throw new Error(data.status + " - " + data.messages.error);
        }

        if (!data.success) throw new Error(data.messages.error);
        if (!data.token) throw new Error("Token ausente.");

        $store.dispatch("setToken", data.token);

        // Mostrar el token en consola
        console.log('TOKEN:', data.token);

        $f7.notification
          .create({
            icon: '<i class="icon f7-icons color-green size-50">hand_thumbsup_fill</i>',
            text: data.messages,
            closeTimeout: 2000,
            on: {
              close: function () {
                $("input#iusername")
                  .eq(0)
                  .val("")
                  .trigger("input change")
                  .focus()
                  .trigger("input:clear");
                $("input#ipassword")
                  .eq(0)
                  .val("")
                  .trigger("input change")
                  .focus()
                  .trigger("input:clear");
                $store.dispatch("setToken", data.token);

                // CARGAR CONVERSACIONES despuÃ©s del login exitoso
                setTimeout(() => {
                  cargarDatos();
                }, 2000);
              },
            },
          })
          .open();

        // TambiÃ©n cargar aquÃ­ por si acaso
        setTimeout(() => {
          cargarDatos();
        }, 2500);
      } catch (error) {
        $f7.dialog.close();
        console.error("Error al iniciar sesiÃ³n:", error);
        $f7.notification
          .create({
            text: error.message || error.toString(),
            closeTimeout: 3000,
          })
          .open();
      }
    };

    // --- Mejorar la funciÃ³n cerrarSesion ---
    const cerrarSesion = async function () {
      $f7.dialog.preloader("Cerrando SesiÃ³n", "red");

      // âœ… Intentar logout en servidor, pero no bloquear el logout local
      logout().catch((error) => {
        console.warn(
          "Error en logout del servidor (ignorado):",
          error.response?.status === 500 ? "Token ya eliminado" : error.message
        );
      });

      // âœ… Ejecutar logout local inmediatamente
      setTimeout(() => {
        $f7.dialog.close();

        // Desconectar socket
        if (socket) {
          socket.disconnect();
          socket = null;
        }

        // Limpiar sesiÃ³n local
        $store.dispatch("cerrarSistema");
      }, 500);
    };

    // --- Limpieza al cerrar la aplicaciÃ³n ---
    $on("pageBeforeRemove", () => {
      if (socket) {
        socket.disconnect();
        socket = null;
      }
    });

    // --- LOGS PARA DEPURAR NAVEGACIÃ“N Y PANEL DE CAMBIAR CONTRASEÃ‘A ---
    $on('routeChange', (route) => {
      console.log('[F7-LOG] Cambio de ruta:', route);
      if (route && route.url && route.url.includes('/usuario/cambiar-contraseÃ±a')) {
        console.log('[F7-LOG] Intentando abrir panel de cambiar contraseÃ±a:', route);
      }
    });

    $on('panelOpen', (panel) => {
      console.log('[F7-LOG] Panel abierto:', panel);
    });

    // Captura global de errores de parseo de componentes F7
    window.addEventListener('error', function (e) {
      if (e && e.message && e.message.includes('Unexpected token')) {
        console.error('[F7-LOG] Error de parseo de componente:', e.message, e);
      }
    });

    return $render;
  };
</script>

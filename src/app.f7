<template>
  <div id="app">
    <!-- Panel izquierdo: Lista de conversaciones -->
    <div
      class="panel panel-left panel-cover dark panel-init"
      data-visible-breakpoint="960"
    >
      <div class="view view-init" data-name="left">
        <div class="page" data-name="home">
          <div class="navbar navbar-large">
            <div class="navbar-bg"></div>
            <div class="navbar-inner sliding">
              <div class="title">MyApp</div>
              <div class="title-large">
                <div class="title-large-text">Conversaciones</div>
              </div>
              <div
                class="subnavbar"
                style="
                  display: flex;
                  justify-content: flex-end;
                  padding: 0 10px;
                "
              >
                <form
                  class="searchbar searchbar-init"
                  style="max-width: 300px; width: 100%"
                  onsubmit="return false;"
                >
                  <div class="searchbar-inner">
                    <div class="searchbar-input-wrap">
                      <input
                        id="search-input"
                        type="search"
                        placeholder="Buscar por teléfono"
                        autocomplete="off"
                      />
                      <i class="searchbar-icon"></i>
                      <span class="input-clear-button" id="clear-button"></span>
                    </div>
                    <span class="searchbar-disable-button">Cancel</span>
                  </div>
                </form>
              </div>
            </div>
          </div>
          <div class="page-content">
            <div class="list">
              <ul id="lista-conversaciones">
                <!-- Las conversaciones se renderizan aquí -->
              </ul>
            </div>
          </div>
        </div>
      </div>
    </div>

    <!-- Panel derecho: Datos del cliente -->
    <div class="panel panel-right panel-reveal dark">
      <div class="view">
        <div class="page">
          <div class="navbar">
            <div class="navbar-bg"></div>
            <div class="navbar-inner">
              <div class="title">Datos del Cliente</div>
            </div>
          </div>
          <div class="page-content">
            <div class="block" id="panel-datos-cliente">
              Selecciona una conversación para ver los datos del cliente.
            </div>
          </div>
        </div>
      </div>
    </div>

    <!-- Vista principal -->
    <div class="view view-main view-init safe-areas" data-url="/"></div>
  </div>
</template>

<script>
  // --- Importaciones ---
  import {
    getClientes,
    getPerfiles,
    getConversaciones,
  } from "./js/services/index.js";
  import io from "socket.io-client";
  import { panelDerecho, panelIzquierdo } from "./js/components/index.js";

  export default (props, { $on, $f7 }) => {
    // --- Variables de estado ---
    let conversaciones = [];
    let clientes = [];
    let perfiles = [];
    let socket = null;

    // --- Ciclo de vida: Al iniciar la página ---
    $on("pageInit", () => {
      // Conexión en tiempo real con el servidor
      socket = io("http://82.180.163.151:3000");

      socket.on("conversacion_asignada", (data) => {
        const usuarioId = Number(localStorage.getItem("usuarioId"));
        console.log("Evento conversacion_asignada recibido:", data);
        if (data.usuarioId && data.usuarioId == usuarioId) {
          cargarDatos();
          $f7.toast
            .create({
              text: "Nueva conversación recibida",
              closeTimeout: 2000,
              position: "top",
            })
            .open();
        }
      });

      // Carga inicial de datos
      cargarDatos();
    });

    // --- Ciclo de vida: Al salir de la página ---
    $on("pageBeforeRemove", () => {
      if (socket) {
        socket.disconnect();
        socket = null;
      }
    });

    // --- Función: Cargar datos desde el servidor ---
    const cargarDatos = async () => {
      try {
        [conversaciones, clientes, perfiles] = await Promise.all([
          getConversaciones(),
          getClientes(),
          getPerfiles(),
        ]);
        renderConversaciones(conversaciones);
        initSearch();
      } catch (err) {
        $f7.toast
          .create({
            text: "Error al cargar conversaciones",
            closeTimeout: 3000,
          })
          .open();
      }
    };

    // --- Función: Renderizar la lista de conversaciones ---
    const renderConversaciones = (convs) => {
      const usuarioId = Number(localStorage.getItem("usuarioId"));
      const convsFiltradas = convs.filter(
        (conv) => conv.usuarioId && conv.usuarioId == usuarioId
      );

      const lista = document.querySelector("#lista-conversaciones");
      panelIzquierdo({
        lista,
        conversaciones: convsFiltradas,
        clientes,
        perfiles,
        panelIzquierdo,
        panelDerecho,
        $f7,
      });
    };

    // --- Función: Inicializar la búsqueda de conversaciones ---
    const initSearch = () => {
      const input = document.querySelector("#search-input");
      const clearBtn = document.querySelector("#clear-button");

      if (!input || !clearBtn) return;

      input.addEventListener("input", () => {
        const query = input.value.trim().toLowerCase();

        if (query === "") {
          renderConversaciones(conversaciones);
          return;
        }

        const usuarioId = Number(localStorage.getItem("usuarioId"));
        const filtradas = conversaciones.filter((conv) => {
          if (!conv.telefono) return false;
          // Solo buscar entre las que ya tienen usuario asignado y corresponden al usuario actual
          return (
            conv.usuarioId &&
            conv.usuarioId == usuarioId &&
            (conv.telefono.toLowerCase().includes(query) ||
              conv.conversacionId.toString().includes(query))
          );
        });

        renderConversaciones(filtradas);
      });

      clearBtn.addEventListener("click", () => {
        input.value = "";
        renderConversaciones(conversaciones);
        input.focus();
      });
    };

    // --- Render de Framework7 ---
    return $render;
  };
</script>

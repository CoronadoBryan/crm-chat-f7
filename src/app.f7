<template>
  <div id="app">
    <!-- Panel izquierdo-->
    <div
      class="panel panel-left panel-cover dark panel-init"
      data-visible-breakpoint="960"
    >
      <div class="view view-init" data-name="left">
        <div class="page" data-name="home">
          <!-- Top Navbar -->
          <div class="navbar navbar-large">
            <div class="navbar-bg"></div>
            <div class="navbar-inner sliding">
              <div class="title">MyApp</div>
              <div class="title-large">
                <div class="title-large-text">Conversaciones</div>
              </div>
              <div
                class="subnavbar"
                style="
                  display: flex;
                  justify-content: flex-end;
                  padding: 0 10px;
                "
              >
                <form
                  class="searchbar searchbar-init"
                  style="max-width: 300px; width: 100%"
                  onsubmit="return false;"
                >
                  <div class="searchbar-inner">
                    <div class="searchbar-input-wrap">
                      <input
                        id="search-input"
                        type="search"
                        placeholder="Buscar por tel√©fono"
                        autocomplete="off"
                      />
                      <i class="searchbar-icon"></i>
                      <span class="input-clear-button" id="clear-button"></span>
                    </div>
                    <span class="searchbar-disable-button">Cancel</span>
                  </div>
                </form>
              </div>
            </div>
          </div>
          <!-- Agregar el contenido del panel -->
          <div class="page-content">
            <div class="list">
              <ul id="lista-conversaciones">
                <!-- Las conversaciones se renderizan aqu√≠ -->
              </ul>
            </div>
          </div>
        </div>
      </div>
    </div>

    <!-- Panel derecho -->
    <div class="panel panel-right panel-reveal dark">
      <div class="view">
        <div class="page">
          <div class="navbar">
            <div class="navbar-bg"></div>
            <div class="navbar-inner">
              <div class="title">Datos del Cliente</div>
            </div>
          </div>
          <div class="page-content">
            <div class="block" id="panel-datos-cliente">
              Selecciona una conversaci√≥n para ver los datos del cliente.
            </div>
          </div>
        </div>
      </div>
    </div>

    <!-- Your main view, should have "view-main" class -->
    <div class="view view-main view-init safe-areas" data-url="/"></div>
  </div>
</template>

<script>
  import { getClientes, getPerfiles, getConversaciones } from "./js/services/index.js";
  import io from "socket.io-client";

  export default (props, { $on, $f7 }) => {
    let conversaciones = [];
    let clientes = [];
    let perfiles = [];
    let socket = null;

    $on("pageInit", () => {
      console.log("P√°gina inicializada");

      // Conectar a Socket.IO para tiempo real
      socket = io("http://82.180.163.151:3000");

      socket.on("connect", () => {
        console.log("‚úÖ Conectado en tiempo real");
      });

      socket.on("disconnect", () => {
        console.log("‚ùå Desconectado");
      });

      // Escuchar nueva conversaci√≥n
      socket.on("nueva_conversacion", (data) => {
        console.log("üì± Nueva conversaci√≥n:", data);
        cargarDatos();

        $f7.toast
          .create({
            text: "Nueva conversaci√≥n recibida",
            closeTimeout: 2000,
            position: "top",
          })
          .open();
      });

      // Cargar datos iniciales
      cargarDatos();
    });

    $on("pageBeforeRemove", () => {
      if (socket) {
        console.log("üîå Desconectando Socket.IO...");
        socket.disconnect();
        socket = null;
      }
    });

    const cargarDatos = async () => {
      try {
        [conversaciones, clientes, perfiles] = await Promise.all([
          getConversaciones(),
          getClientes(),
          getPerfiles(),
        ]);
        renderConversaciones(conversaciones);
        initSearch();
      } catch (err) {
        $f7.toast.create({
          text: "Error al cargar conversaciones",
          closeTimeout: 3000,
        }).open();
      }
    };

    const renderConversaciones = (convs) => {
      const lista = document.querySelector("#lista-conversaciones");

      if (!lista) return;

      if (convs.length === 0) {
        lista.innerHTML = `
          <li class="item-content-center">
            <div class="item-inner" style="text-align: center; padding: 40px 20px;">
              <div class="text-color-gray" style="font-size: 14px; margin-top: 8px;">
                Las nuevas conversaciones aparecer√°n aqu√≠
              </div>
            </div>
          </li>`;
        return;
      }

      lista.innerHTML = convs
        .map((conv) => {
          const telefono = conv.telefono ?? "Sin n√∫mero";
          return `
          <li class="abrir-chat" data-conv-id="${
            conv.conversacionId
          }" style="cursor:pointer;">
            <div class="item-content">
              <div class="item-media">
                <div class="avatar color-blue" style="background: linear-gradient(45deg, #007aff, #5856d6);">
                  <span style="font-weight: 600;">${telefono.slice(-2)}</span>
                </div>
              </div>
              <div class="item-inner">
                <div class="item-title-row">
                  <div class="item-title" style="font-weight: 500; color: var(--f7-text-color);">
                    ${telefono}
                  </div>
                  <div class="item-after">
                    <i class="icon f7-icons color-gray">chevron_right</i>
                  </div>
                </div>
              </div>
            </div>
          </li>
        `;
        })
        .join("");

      lista.querySelectorAll(".abrir-chat").forEach((el) => {
        el.addEventListener("click", async (e) => {
          e.preventDefault();
          const convId = el.getAttribute("data-conv-id");
          const conv = conversaciones.find((c) => c.conversacionId == convId);

          // 1. Buscar cliente por tel√©fono
          let cliente = null;
          try {
            cliente = clientes.find(c => c.telefono === conv.telefono);
          } catch (err) {
            console.error("Error buscando cliente:", err);
          }

          // 2. Buscar perfil por id_cliente
          let perfil = null;
          if (cliente) {
            try {
              perfil = perfiles.find(p => p.id_cliente === cliente.id);
            } catch (err) {
              console.error("Error buscando perfil:", err);
            }
          }

          // 3. Mostrar datos en el panel derecho
          const panelDatos = document.getElementById("panel-datos-cliente");
          if (panelDatos) {
            if (perfil) {
              const camposCompletos =
                perfil.nombre && perfil.apellido && perfil.marca && perfil.modelo && perfil.placa;
              panelDatos.innerHTML = `
                <div class="block-title" style="margin-bottom:0;">
                  <i class="icon f7-icons" style="color:#007aff; vertical-align:middle;">person_fill</i>
                  <span style="font-size:18px; font-weight:600;">${perfil.nombre || ""} ${perfil.apellido || ""}</span>
                </div>
                <div class="list no-hairlines">
                  <ul>
                    <li>
                      <div class="item-content">
                        <div class="item-inner">
                          <div class="item-title"><b>Tel√©fono</b></div>
                          <div class="item-after">${conv.telefono}</div>
                        </div>
                      </div>
                    </li>
                    <li>
                      <div class="item-content">
                        <div class="item-inner">
                          <div class="item-title"><b>Marca</b></div>
                          <div class="item-after">${perfil.marca || "-"}</div>
                        </div>
                      </div>
                    </li>
                    <li>
                      <div class="item-content">
                        <div class="item-inner">
                          <div class="item-title"><b>Modelo</b></div>
                          <div class="item-after">${perfil.modelo || "-"}</div>
                        </div>
                      </div>
                    </li>
                    <li>
                      <div class="item-content">
                        <div class="item-inner">
                          <div class="item-title"><b>Placa</b></div>
                          <div class="item-after">${perfil.placa || "-"}</div>
                        </div>
                      </div>
                    </li>
                  </ul>
                </div>
                <div class="block" style="margin-top:12px; text-align:center;">
                  ${
                    camposCompletos
                      ? `<span style="color:green; font-weight:600;"><i class="icon f7-icons" style="vertical-align:middle;">checkmark_circle_fill</i> Registro completo</span>`
                      : `<span style="color:#ff9500; font-weight:600;"><i class="icon f7-icons" style="vertical-align:middle;">exclamationmark_triangle_fill</i> Registro incompleto</span>`
                  }
                </div>
              `;
            } else {
              panelDatos.innerHTML = `
                <div class="block-title" style="margin-bottom:0;">
                  <i class="icon f7-icons" style="color:#007aff; vertical-align:middle;">person_fill</i>
                  <span style="font-size:18px; font-weight:600;">Sin datos de perfil</span>
                </div>
                <div class="list no-hairlines">
                  <ul>
                    <li>
                      <div class="item-content">
                        <div class="item-inner">
                          <div class="item-title"><b>Tel√©fono</b></div>
                          <div class="item-after">${conv.telefono}</div>
                        </div>
                      </div>
                    </li>
                  </ul>
                </div>
                <div class="block" style="margin-top:12px; text-align:center; color:#ff3b30;">
                  <i class="icon f7-icons" style="vertical-align:middle;">xmark_circle_fill</i> No hay perfil registrado
                </div>
              `;
            }
          }

          // Navega al chat si quieres
          $f7.views.main.router.navigate(`/messages/${convId}/`, {
            reloadAll: true,
          });
        });
      });
    };

    const initSearch = () => {
      const input = document.querySelector("#search-input");
      const clearBtn = document.querySelector("#clear-button");

      if (!input || !clearBtn) {
        console.warn("‚ö†Ô∏è Elementos de b√∫squeda no encontrados");
        return;
      }

      input.addEventListener("input", () => {
        const query = input.value.trim().toLowerCase();

        if (query === "") {
          renderConversaciones(conversaciones);
          return;
        }

        const filtradas = conversaciones.filter((conv) => {
          if (!conv.telefono) return false;
          return (
            conv.telefono.toLowerCase().includes(query) ||
            conv.conversacionId.toString().includes(query)
          );
        });

        renderConversaciones(filtradas);
      });

      clearBtn.addEventListener("click", () => {
        input.value = "";
        renderConversaciones(conversaciones);
        input.focus();
      });
    };

    return $render;
  };
</script>
